-- ---------------------------------------------------------------------- -
-- 1. BEISPIEL: SUBSELECT, WITH KLAUSEL
-- ---------------------------------------------------------------------- -
-- REGION

-- ZUR ERSTELLUNG DER JAEHRLICHEN BILANZ SOLL FUER JEDES PROJEKT EIN
-- REPORT ERSTELLT WERDEN.

-- GEBEN SIE FUER JEDES PROJEKT DIE FOLGENDEN DATEN AUS:
-- AUSGABE: PROJECT_ID, TITLE, PROJECT_TYPE,
--          SUBPROJECT_COUNT, INSTITUTE_COUNT,
--          DEBITOR_COUNT, FUNDING_AMOUNT,
--          PROJECT_COMPLEXITY

-- @PROJECT_TYPE: FUER PROJEKTE SOLL DER TOKEN
--         'REQUEST_FUNDING_PROJECT' FUER REQUESTFUNDINGPROJEKTE
--         'RESEARCH_FUNDING_PROJECT' FUER RESEARCHFUNDINGPROJEKTE
--         'MANAGEMENT_PROJECT' FUER MANAGEMENTPROJEKTE

--          HINWEIS: VERWENDEN SIE ANSONSTEN DEN TOKEN 'DEFAULT_PROJECT'

-- @SUBPROJECT_COUNT: ANZAHL DER SUBPROJEKTE

-- @INSTITUTE_COUNT: ANZAHL DER INSTITUTE DIE AN DER UMSETZUNG DES
--                   PROJEKTS INVOLVIERT SIND

-- @DEBITOR_COUNT: ANZAHL DER GELDGEBER DIE DAS PROJEKT FINANZIELL
--                 UNTERSTUETZEN

-- @FUNDING_AMOUNT: DER GELDBETRAG MIT DEM DAS PROJEKT UNTERSTUETZT WIRD

-- @PROJECT_COMPLEXITY: DIE PROJEKTKOMPLEXITAET BESCHREIBT DIE KOMPLEXITÄT
--                      EINES PROJEKTS. DER WERT IST ALS SUMMER FOLGENDER
--                      POSTEN ZU VERSTEHEN:
--
--  KRITERIUM                                 PUNKTE
--  REQUEST_FUNDING_PROJECT                   10
--  RESEARCH_FUNDING_PROJECT                  5
--  MANAGEMENT_PROJECT                        3
--  THEORETICAL_RESEARCH > 50                 3
--  INSTITUE_COUNT > 3                        2
--  FUNDING_AMOUNT > 50 000                   3

-- SORTIEREN SIE DAS ERGEBNIS NACH DER PROJEKTKOMPLEXITAET ABSTEIGEND

-- TABELLEN: PROJECTS, REQUEST_FUNDING_PROJECTS, RESEARCH_FUNDING_PROJECTS
--           SUBPROJECTS, PROJECT_DEBITORS

SELECT P.*, CASE WHEN RFP.PROJECT_ID IS NOT NULL THEN 'RESEARCH_FUNDING_PROJECT' END
FROM PROJECTS_BT P
         LEFT JOIN REQUEST_FUNDING_PROJECTS RFP ON P.PROJECT_ID = RFP.PROJECT_ID;

WITH PROJECT_TYPE AS (SELECT P.PROJECT_ID,
                             CASE
                                 WHEN RSP.PROJECT_ID IS NOT NULL THEN 'RESEARCH_FUNDING_PROJECT'
                                 WHEN RQP.PROJECT_ID IS NOT NULL THEN 'REQUEST_FUNDING_PROJECT'
                                 WHEN MP.PROJECT_ID IS NOT NULL THEN 'MANAGEMENT_PROJECT'
                                 ELSE 'DEFAULT_PROJECT'
                                 END AS PROJECT_TYPE,
                             CASE
                                 WHEN RSP.PROJECT_ID IS NOT NULL THEN 5
                                 WHEN RQP.PROJECT_ID IS NOT NULL THEN 10
                                 WHEN MP.PROJECT_ID IS NOT NULL THEN 3
                                 ELSE 0
                                 END AS PROJECT_COMPLEXITY
                      FROM PROJECTS_BT P
                               LEFT JOIN RESEARCH_FUNDING_PROJECTS RSP ON P.PROJECT_ID = RSP.PROJECT_ID
                               LEFT JOIN REQUEST_FUNDING_PROJECTS RQP ON P.PROJECT_ID = RQP.PROJECT_ID
                               LEFT JOIN MANAGEMENT_PROJECTS MP ON P.PROJECT_ID = MP.PROJECT_ID),
     SUBPROJECT_DATA AS (SELECT PROJECT_ID,
                                COUNT(SUBPROJECT_ID)       AS                              SUBPROJECT_COUNT,
                                COUNT(UNIQUE INSTITUTE_ID) AS                              INSTITUTE_COUNT,
                                SUM(CASE WHEN THEORETICAL_RESEARCH > 50 THEN 3 ELSE 0 END) PROJECT_COMPLEXITY,
                                CASE WHEN COUNT(UNIQUE INSTITUTE_ID) > 3 THEN 2 ELSE 0 END PROJECT_COMPLEXITY2
                         FROM SUBPROJECTS
                         GROUP BY PROJECT_ID),
     FUNDING_DATA AS (SELECT PROJECT_ID,
                             COUNT(UNIQUE DEBITOR_ID) AS                     DEBITOR_COUNT,
                             SUM(AMOUNT)              AS                     FUNDING_AMOUNT,
                             CASE WHEN SUM(AMOUNT) > 50000 THEN 3 ELSE 0 END PROJECT_COMPLEXITY
                      FROM PROJECT_DEBITORS_JT
                      GROUP BY PROJECT_ID)


SELECT P.PROJECT_ID,
       P.TITLE,
       PT.PROJECT_TYPE,
       COALESCE(SC.SUBPROJECT_COUNT, 0) AS SUBPROJECT_COUNT,
       COALESCE(SC.INSTITUTE_COUNT, 0)  AS INSTITUTE_COUNT,
       COALESCE(FD.DEBITOR_COUNT, 0)    AS DEBITOR_COUNT,
       COALESCE(FD.FUNDING_AMOUNT, 0)   AS FUNDING_AMOUNT,
       COALESCE(SC.PROJECT_COMPLEXITY, 0) + COALESCE(PT.PROJECT_COMPLEXITY, 0) + COALESCE(SC.PROJECT_COMPLEXITY2, 0) +
       COALESCE(FD.PROJECT_COMPLEXITY, 0) AS PROJECT_COMPLEXITY

FROM PROJECTS_BT P
         INNER JOIN PROJECT_TYPE PT ON P.PROJECT_ID = PT.PROJECT_ID
         LEFT JOIN SUBPROJECT_DATA SC ON P.PROJECT_ID = SC.PROJECT_ID
         LEFT JOIN FUNDING_DATA FD ON P.PROJECT_ID = FD.PROJECT_ID

ORDER BY PROJECT_COMPLEXITY DESC;



-- ENDREGION


-- ---------------------------------------------------------------------- -
-- 2. BEISPIEL: SUBSELECT, EXISTS KLAUSEL
-- ---------------------------------------------------------------------- -
-- REGION

-- FINDEN SIE ALLE PROJEKTE DENEN ZUMINDESTENS 1 SUBPROJEKT ZUGEORDNET IST.
-- GEBEN SIE FÜR PROJEKT DATENSÄTZE FOLGENDE WERTE AUS: PROJECT_ID, TITLE


-- TABLE: PROJECTS_BT, SUBPROJECTS

SELECT DISTINCT PT.* FROM PROJECTS_BT PT
    JOIN SUBPROJECTS ON PT.PROJECT_ID = SUBPROJECTS.PROJECT_ID;

SELECT * FROM PROJECTS_BT PT
WHERE EXISTS(SELECT * FROM SUBPROJECTS SP WHERE SP.PROJECT_ID = PT.PROJECT_ID)


-- ENDREGION

-- ---------------------------------------------------------------------- -
-- 3. BEISPIEL: SUBSELECT, EXISTS KLAUSEL
-- ---------------------------------------------------------------------- -
-- REGION

-- FINDEN SIE ALLE GELDGEBER DIE ZUMINDESTENS EIN PROJEKT FINANZIELL UNTER-
-- STÜTZEN.

-- GEBEN SIE FÜR DEBITOR DATENSÄTZE FOLGENDE WERTE AUS: DEBITOR_ID, NAME


-- TABLE: DEBITORS, PROJECT_DEBITORS_JT


-- ENDREGION

-- ---------------------------------------------------------------------- -
-- 4. BEISPIEL: SUBSELECT, EXISTS KLAUSEL
-- ---------------------------------------------------------------------- -
-- REGION

-- GEBEN SIE ALLE GESETZLICHEN PARAGRAPHEN (E_LEGAL_FOUNDATIONS) AN, DENEN
-- ZUMINDESTENS 1 PROJEKT ZUGEORDNET IST.

-- GEBEN SIE FÜR E_LEGAL_FOUNDATIONS DATENSÄTZE FOLGENDE SPALTEN AUS: LABEL


-- TABLES: E_LEGAL_FOUNDATIONS, PROJECTS_BT


-- ENDREGION

-- ---------------------------------------------------------------------- -
-- 5. BEISPIEL: SUBSELECT, EXISTS KLAUSEL
-- ---------------------------------------------------------------------- -
-- REGION

-- FINDEN SIE ALLE PROJEKTE DIE KEINE FINANZIELLE UNTERSTÜTZUNG HABEN.
-- GEBEN SIE FOLGENDE SPALTEN AUS: PROJECT_ID, TITLE


-- TABLE: PROJECTS_BT, PROJECT_DEBITORS_JT


-- ENDREGION

-- ---------------------------------------------------------------------- -
-- 6. BEISPIEL: SUBSELECT, EXISTS KLAUSEL
-- ---------------------------------------------------------------------- -
-- REGION

-- FINDEN SIE ALLE INSTITUE (FACILITIES_ST.FACILITY_TYPE -> INSTITUTE) DIE
-- KEINE SUBPROJEKTE UMGESETZT HABEN.

-- GEBEN SIE FÜR INSTITUTE FOLGENDE SPALTEN AUS:


-- TABLE: FACILITIES_ST, SUBPROJECTS


-- ENDREGION

-- ---------------------------------------------------------------------- -
-- 7. BEISPIEL: SUBSELECT, EXISTS KLAUSEL
-- ---------------------------------------------------------------------- -
-- REGION

-- FINDEN SIE ALLE PROJEKTE DIE NICHT VORGÄNGEPROJEKTE ANDERER PROJEKTE SIND.
-- GEBEN SIE FÜR PROJEKTE FOLGENDE SPALTEN AUS: PROJECT_ID, TITLE


-- TABLE: PROJECTS_BT, PROJECT_FORERUNNERS_JT


-- ENDREGION
