-- ------------------------------------------------------------------------
-- 1.1) SQL KLAUSELN
-- ------------------------------------------------------------------------
-- REGION

-- GEBEN SIE FÜR KREUZFAHRTEN FOLGENDE WERTE AN:
-- LABEL, NAME, DISTANCE.

-- @LABEL -> CRUISES.LABEL
-- @NAME  -> SHIP.NAME
-- @ROUTE_NAME -> ROUTES_JT.NAME
-- @DISTANCE   -> ROUTES_JT.DISTANCE

-- TABLES: CRUISES, CRUISE_HAS_ROUTES_JT, ROUTES_JT

SELECT C.LABEL, S.NAME, RJ.NAME, RJ.DISTANCE
FROM CRUISES C
         JOIN SHIPS S ON C.SHIP_ID = S.SHIP_ID
         JOIN CRUISE_HAS_ROUTES_JT CHRJ ON C.CRUISE_ID = CHRJ.CRUISE_ID
         JOIN ROUTES_JT RJ
              ON CHRJ.DEPARTURE_HARBOR_ID = RJ.DEPARTURE_HARBOR_ID AND CHRJ.ARRIVAL_HARBOR_ID = RJ.ARRIVAL_HARBOR_ID;

-- ENDREGION

-- ------------------------------------------------------------------------
-- 1.2) SQL KLAUSELN
-- ------------------------------------------------------------------------
-- REGION

-- GEBEN SIE FÜR KREUZFAHRTEN FOLGENDE WERTE AN:
-- LABEL, DISTANCE, DISTANCE_CLASSIFICATION

-- @LABEL -> CRUISES.LABEL
-- @DISTANCE -> DIE WÄHREND DER KREUZFAHRT ZURÜCKGELEGTE LÄNGE DER SUMME
--              DER STRECKEN

-- @DISTANCE_CLASSFICATION -> ENTSPRECHEND DER ZURÜCKGELEGTEN STRECKE SOLL
--                            EINE KLASSIFIZIERUNG ANGEGEBEN WERDEN:

--     0    < DISTANCE <= 1000     "SHORT_CRUISE"
--     1000 < DISTANCE <= 2000     "MEDIUM_CRUISE"
--     2000 < DISTANCE <= ....     "LONG_CRUIS

SELECT C.LABEL          AS LABEL,
       SUM(RJ.DISTANCE) AS DISTANCE,
       CASE
           WHEN SUM(RJ.DISTANCE) > 0 AND SUM(RJ.DISTANCE) <= 1000 THEN 'SHORT_CRUISE'
           WHEN SUM(RJ.DISTANCE) > 1000 AND SUM(RJ.DISTANCE) <= 2000 THEN 'MEDIUM_CRIUSE'
           ELSE 'LONG_CRUISE' END
                        AS DISTANCE_CLASSIFICATION
FROM CRUISES C
         JOIN CRUISE_HAS_ROUTES_JT CHRJ ON C.CRUISE_ID = CHRJ.CRUISE_ID
         JOIN ROUTES_JT RJ
              ON CHRJ.DEPARTURE_HARBOR_ID = RJ.DEPARTURE_HARBOR_ID AND
                 CHRJ.ARRIVAL_HARBOR_ID = RJ.ARRIVAL_HARBOR_ID
GROUP BY C.LABEL;



-- ENDREGION

-- ------------------------------------------------------------------------
-- 1.3) SUBSELECT
-- ------------------------------------------------------------------------
-- REGION

-- ERMITTELN SIE DIE ANGESTELLTENGRUPPE, IN DER ZUR ZEIT DIE MEISTEN
-- ANGESTELLTEN BESCHAEFTIGT SIND.

-- AUSGABE: EMPLOYEE_TYPE, EMPLOYEE_COUNT

-- TABELLEN: EMPLOYEE_ST

-- CONDITION:
SELECT COUNT(EMPLOYEE_ID), EMPLOYEE_TYPE
FROM EMPLOYEE_ST
GROUP BY EMPLOYEE_TYPE
HAVING COUNT(EMPLOYEE_ID) = (SELECT MAX(EMPLOYEE_COUNT) MAX_EMPLOYEE_COUNT
                             FROM (SELECT COUNT(EMPLOYEE_ID) EMPLOYEE_COUNT, EMPLOYEE_TYPE
                                   FROM EMPLOYEE_ST
                                   GROUP BY EMPLOYEE_TYPE));

-- INNERE VIEW:

SELECT MAX_EMPLOYEE_COUNT, EMPLOYEE_TYPE
FROM (SELECT COUNT(EMPLOYEE_ID) EMPLOYEE_COUNT, EMPLOYEE_TYPE
      FROM EMPLOYEE_ST
      GROUP BY EMPLOYEE_TYPE) EMPLOYEE_GROUPES
         JOIN (SELECT MAX(COUNT(EMPLOYEE_ID)) MAX_EMPLOYEE_COUNT
               FROM EMPLOYEE_ST
               GROUP BY EMPLOYEE_TYPE) MAX_EMPLOYEE_VALUE
              ON EMPLOYEE_GROUPES.EMPLOYEE_COUNT = MAX_EMPLOYEE_VALUE.MAX_EMPLOYEE_COUNT



-- ENDREGION

-- ------------------------------------------------------------------------
-- 1.4) SUBSELECT
-- ------------------------------------------------------------------------
-- REGION

-- FUER WELCHES LAND WERDEN DIE MEISTEN HAEFEN GESPEICHERT. GEBEN SIE DIE
-- FOLGENDEN SPALTEN AUS:

-- AUSGABE: COUNTRY, HARBOR_COUNT

-- TABELLEN: HARBORS

SELECT COUNTRY, MAX_HARBOR_COUNT
FROM (SELECT COUNT(HARBOR_ID) HARBOR_COUNT, COUNTRY FROM HARBORS GROUP BY COUNTRY)
         JOIN (SELECT MAX(COUNT(HARBOR_ID)) MAX_HARBOR_COUNT FROM HARBORS GROUP BY COUNTRY)
              ON MAX_HARBOR_COUNT = HARBOR_COUNT;


SELECT COUNT(HARBOR_ID) HARBOR_COUNT, COUNTRY
FROM HARBORS
GROUP BY COUNTRY
HAVING COUNT(HARBOR_ID) = (SELECT MAX(COUNT(HARBOR_ID)) MAX_HARBOR_COUNT FROM HARBORS GROUP BY COUNTRY);



-- ENDREGION

-- ------------------------------------------------------------------------
-- 1.5) SUBSELECT
-- ------------------------------------------------------------------------
-- REGION

-- GEBEN SIE DIE UMSATZHOECHSTE BUCHUNG AUS. BERUECKSICHTIGEN SIE NUR
-- BUCHUNGEN DIE ZWISCHEN 2007 UND 2020 ABGESCHLOSSEN WURDEN.

-- AUSGABE: BOOKING_ID, TURNOVER

-- @TURNOVER: BESCHREIBT DEN GESAMTEN UMSATZ FUER EINE BUCHUNG.

-- HINWEIS: JEDER CRUISE_HAS_BOOKINGS_JT DATENSATZ BESCHREIBT WELCHER
--          REISENDE, WELCHE KABINE FUER WELCHE KREUZFAHRT ZU WELCHEM
--          PREIS ERSTANDEN IM RAHMEN WELCHER BUCHUNG ERSTANDEN HAT.

--          EINE BUCHUNG KANN AUS MEHREREN CRUISE_HAS_BOOKING_JT
--          DATENSAETZEN BESTEHEN!

-- TABELLEN: CRUISE_HAS_BOOKINGS_JT, BOOKINGS


WITH BOOKING_DATA AS (SELECT SUM(PRICE) AS PRICE, BOOKING_ID FROM CRUISE_HAS_BOOKINGS_JT GROUP BY BOOKING_ID)

SELECT *
FROM CRUISE_HAS_BOOKINGS_JT;

SELECT SUM(PRICE) AS PRICE, BOOKING_ID
FROM CRUISE_HAS_BOOKINGS_JT
GROUP BY BOOKING_ID;

SELECT ID, MAX(SUM(PRICE))
FROM (SELECT B.BOOKING_ID ID, CHB.PRICE
      FROM CRUISE_HAS_BOOKINGS_JT CHB
               LEFT JOIN BOOKINGS B ON B.BOOKING_ID = CHB.BOOKING_ID
      WHERE BOOKED_AT > '1.1.2007'
        AND BOOKED_AT < '1.1.2020')
GROUP BY ID;

SELECT *
FROM CRUISE_HAS_BOOKINGS_JT CHB
         INNER JOIN BOOKINGS B ON B.BOOKING_ID = CHB.BOOKING_ID
WHERE (BOOKED_AT >= '2008-01-01' AND BOOKED_AT <= '2019-12-31');



SELECT *
FROM BOOKINGS;

-- ENDREGION

-- ------------------------------------------------------------------------
-- 1.6) SUBSELECT
-- ------------------------------------------------------------------------
-- REGION

-- IN WELCHER ROLLE ARBEITEN DIE MEISTEN MITARBEITER AUF DER KREUZFAHRT MIT
-- DEN MEISTEN MITARBEITERN?

-- GEBEN SIE FOLGENDEN SPALTENWERTE AUS: CRUISE_ID, EMPLOYEE_ROLE, EMPLOYEE_COUNT

-- @EMPLOYEE_COUNT: ANZAHL DER ANGESTELLTEN DIE IN DER ENTSPRECHENDEN ROLLE
--                  BESCHAEFTIGT SIND.

-- TABELLEN: CRUISE_HAS_EMPLOYEES


-- ENDREGION

-- ------------------------------------------------------------------------
-- 2.1) SUBSELECT: WITH KLAUSEL
-- ------------------------------------------------------------------------
-- REGION

--  ZUR ERSTELLUNG DER JAEHRLICHEN BILANZ SOLL FUER DIE GESPEICHERTEN KREUZ-
--  FAHRTEN EIN REPORT ERSTELLT WERDEN

-- ERMITTELN SIE FUER JEDE KREUZFAHRT DIE FOLGENDEN WERTE:

-- AUSGABE: CRUISE_ID, LABEL, DATE_OF_DEPARTUER, DURATION, EMPLOYEE_COUNT,
--          BOOKING_COUNT, SALES, BOOKED_CABINS

-- @DURATION: ANZAHL DER TAGE
-- @EMPLOYEE_COUNT: ANZAHL DER ANGESTELLTEN
-- @BOOKING_COUNT: ANZAHL DER BUCHUNGEN
-- @SALES: DURCH BUCHUNGEN GENERIERTER UMSATZ
-- @BOOKED_CABINS: DIE ANZAHL DER GEBUCHTEN KABINEN
-- @DISTANCE:

-- SORTIEREN SIE DAS ERGEBNIS NACH DER BEZEICHNUNG DER KREUZFAHRTEN

-- TABELLEN: CRUISES, CRUISE_HAS_EMPLOYEES_JT, CRUISE_HAS_BOOKINGS_JT

WITH EMPLOYEE_COUNT_DATA AS (SELECT COUNT(EMPLOYEE_ID) AS EMPLOYEE_COUNT, CHEJ.CRUISE_ID
                             FROM CRUISE_HAS_EMPLOYEES_JT CHEJ
                             GROUP BY CHEJ.CRUISE_ID),
     BOOKING_COUNT_DATA AS (SELECT CRUISE_ID,
                                   COUNT(BOOKING_ID)      AS BOOKING_COUNT,
                                   SUM(PRICE)             AS SALES,
                                   COUNT(UNIQUE CABIN_NR) AS BOOKED_CABINS
                            FROM CRUISE_HAS_BOOKINGS_JT
                            GROUP BY CRUISE_ID),
     ROUTES_DATA AS (SELECT CRUISE_ID, SUM(ROUTES_JT.DISTANCE) AS DISTANCE
                     FROM CRUISE_HAS_ROUTES_JT
                              JOIN ROUTES_JT
                                   ON CRUISE_HAS_ROUTES_JT.DEPARTURE_HARBOR_ID = ROUTES_JT.DEPARTURE_HARBOR_ID AND
                                      CRUISE_HAS_ROUTES_JT.ARRIVAL_HARBOR_ID = ROUTES_JT.ARRIVAL_HARBOR_ID
                     GROUP BY CRUISE_ID)

SELECT C.CRUISE_ID,
       C.LABEL,
       C.DATE_OF_DAPARTURE,
       C.DATE_OF_ARRIVAL - C.DATE_OF_DAPARTURE AS DURATION,
       COALESCE(ECD.EMPLOYEE_COUNT, 0)         AS EMPLOYEE_COUNT,
       COALESCE(BCD.BOOKING_COUNT, 0)          AS BOOKING_COUNT,
       COALESCE(BCD.SALES, 0)                  AS SALES,
       COALESCE(BCD.BOOKED_CABINS, 0)          AS BOOKED_CABINS,
       COALESCE(RD.DISTANCE, 0)                AS DISTANCE
FROM CRUISES C
         LEFT JOIN EMPLOYEE_COUNT_DATA ECD ON C.CRUISE_ID = ECD.CRUISE_ID
         LEFT JOIN BOOKING_COUNT_DATA BCD ON C.CRUISE_ID = BCD.CRUISE_ID
         LEFT JOIN ROUTES_DATA RD ON C.CRUISE_ID = RD.CRUISE_ID;


-- ENDREGION

-- ------------------------------------------------------------------------
-- 2.2) EXISTS KLAUSEL
-- ------------------------------------------------------------------------
-- REGION

-- GEBEN SIE ALLE SCHIFFSTYPEN AN, DIE ZUMINDESTENS EINEM KREUZFAHRSCHIFF
-- ZUGEORDNET SIND.

-- HINWEIS: ALS KREUZFAHRTSCHIFFE WERDEN SCHIFFE BEZEICHNET DIE BEI
--          KREUZFAHRTEN EINGESETZT WERDEN

-- AUSGABE: TYPE


-- TABLES: E_SHIP_CLASSIFICATION, SHIPS, CRUISES

SELECT *
FROM E_SHIP_CLASSIFICATION;

SELECT *
FROM E_SHIP_CLASSIFICATION E
WHERE EXISTS(SELECT * FROM SHIPS S WHERE S.SHIP_CLASSIFICATION = E.TYPE);

-- ENDREGION

-- ------------------------------------------------------------------------
-- 2.3) EXISTS KLAUSEL
-- ------------------------------------------------------------------------
-- REGION

-- FINDEN SIE ALLE HÄFEN DIE ZUMINDESTENS AUF EINER ROUTE LIEGEN.

-- AUSGABE: HARBOR_ID, NAME, COUNTRY


-- TABLES: HARBORS, ROUTES_JT

SELECT *
FROM HARBORS;
SELECT *
FROM ROUTES_JT;

SELECT H.HARBOR_ID, H.NAME, H.COUNTRY
FROM HARBORS H
WHERE EXISTS(SELECT * FROM ROUTES_JT R WHERE H.HARBOR_ID IN (R.DEPARTURE_HARBOR_ID, R.ARRIVAL_HARBOR_ID));


-- ENDREGION

-- ------------------------------------------------------------------------
-- 2.4) EXISTS KLAUSEL
-- ------------------------------------------------------------------------
-- REGION

-- FINDEN SIE ALLE HÄFEN DIE AUF KEINER ROUTE LIEGEN.

-- AUSGABE: HARBOR_ID, NAME, COUNTRY
-- HINWEIS: ES GIBT KEINE ROUTE FÜR DIE DER DEPARTURE_HARBOR ODER ARRIVAL_HARBOR
--          MIT DEM HAFEN ÜBEREINSTIMMEN


SELECT H.HARBOR_ID, H.NAME, H.COUNTRY
FROM HARBORS H
WHERE NOT EXISTS(SELECT * FROM ROUTES_JT R WHERE H.HARBOR_ID IN (R.DEPARTURE_HARBOR_ID, R.ARRIVAL_HARBOR_ID));

-- TABLES: HARBORS, ROUTES_JT


-- ENDREGION

-- ------------------------------------------------------------------------
-- 2.5) EXISTS KLAUSEL
-- ------------------------------------------------------------------------
-- REGION

-- FINDEN SIE ALLE CRUISES, DIE ZUMINDESTENS EINMAL GEBUCHT WORDEN SIND.

-- AUSGABE: CRUISE_ID, LABEL

-- TABLES: CRUISES, CRUISE_HAS_BOOKINGS_JT

SELECT *
FROM CRUISES;
SELECT *
FROM CRUISE_HAS_BOOKINGS_JT;

SELECT *
FROM CRUISES C
WHERE EXISTS(SELECT * FROM CRUISE_HAS_BOOKINGS_JT CHB WHERE C.CRUISE_ID = CHB.CRUISE_ID);


-- ENDREGION

-- ------------------------------------------------------------------------
-- 2.6) EXISTS KLAUSEL
-- ------------------------------------------------------------------------
-- REGION

-- FINDEN SIE ALLE CRUISES, FÜR DIE KEINE BUCHUNGEN VORLIEGEN.

-- AUSGABE: CRUISE_ID, LABEL

-- TABLES: CRUISES, CRUISE_HAS_BOOKINGS_JT


SELECT *
FROM CRUISES C
WHERE NOT EXISTS(SELECT * FROM CRUISE_HAS_BOOKINGS_JT CHB WHERE C.CRUISE_ID = CHB.CRUISE_ID);

-- ENDREGION

-- ------------------------------------------------------------------------
-- 2.7) EXISTS KLAUSEL
-- ------------------------------------------------------------------------
-- REGION

-- GEBEN SIE ALLE SCHIFFE AUS, DIE KEINER CRUISE ZUGEORDNET SIND.

-- AUSGABE: SHIP_ID, NAME
--
-- @SHIP_ID -> SHIPS.SHIP_ID
-- @NAME    -> SHIPS.NAME

-- TABELLEN: SHIPS, CRUISES

SELECT *
FROM SHIPS;
SELECT *
FROM CRUISES;

SELECT *
FROM SHIPS S
WHERE EXISTS(SELECT * FROM CRUISES C WHERE C.SHIP_ID = S.SHIP_ID);


-- ENDREGION

-- ------------------------------------------------------------------------
-- 2.8) EXISTS KLAUSEL
-- ------------------------------------------------------------------------
-- REGION

-- FINDEN SIE ALLE KREUZFAHRTEN DIE UNTERSCHIEDLICHE KONTINENTE ANFAHREN

-- AUSGABE: CRUISE_ID, LABEL

-- TABELLEN: CRUISES, CRUISES_HAS_ROUTES_JT, ROUTES, HARBORS


-- HINWEIS: ES EXISTIERT MINDESTENS EINE TEILSTRECKE DER KREUZFAHRT DEREN
--          ABFAHRTS- UND ANKUNFTSHAFEN AUF UNTERSCHIEDLICHEN CONTINENTEN LIEGT

SELECT *
FROM CRUISES;
SELECT *
FROM CRUISE_HAS_ROUTES_JT;
SELECT *
FROM ROUTES_JT;
SELECT *
FROM HARBORS;
SELECT *
FROM CRUISE_HAS_ROUTES_JT CHR
         JOIN HARBORS H ON H.HARBOR_ID IN (CHR.DEPARTURE_HARBOR_ID, CHR.ARRIVAL_HARBOR_ID)

SELECT C.CRUISE_ID, C.LABEL
FROM CRUISES C
WHERE EXISTS(SELECT CHR.CRUISE_ID, COUNT(UNIQUE CONTINENT)
             FROM CRUISE_HAS_ROUTES_JT CHR
                      JOIN HARBORS H ON H.HARBOR_ID IN (CHR.DEPARTURE_HARBOR_ID, CHR.ARRIVAL_HARBOR_ID)
             WHERE C.CRUISE_ID = CHR.CRUISE_ID
             GROUP BY CHR.CRUISE_ID
             HAVING COUNT(UNIQUE CONTINENT) > 1);

-- DEKLARATIVERER WEG:
SELECT DISTINCT C.LABEL
FROM CRUISES C
         JOIN CRUISE_HAS_ROUTES_JT CHRJ ON C.CRUISE_ID = CHRJ.CRUISE_ID
WHERE EXISTS(SELECT *
             FROM ROUTES_JT R
                      JOIN HARBORS H1 ON H1.HARBOR_ID = R.ARRIVAL_HARBOR_ID
                      JOIN HARBORS H2 ON H2.HARBOR_ID = R.DEPARTURE_HARBOR_ID
             WHERE H1.CONTINENT <> H2.CONTINENT
               AND ((CHRJ.ARRIVAL_HARBOR_ID = H1.HARBOR_ID
                 AND CHRJ.DEPARTURE_HARBOR_ID = H2.HARBOR_ID)));


SELECT *
FROM ROUTES_JT R
         JOIN HARBORS H1 ON R.DEPARTURE_HARBOR_ID = H1.HARBOR_ID
         JOIN HARBORS H2 ON R.ARRIVAL_HARBOR_ID = H2.HARBOR_ID
WHERE H1.CONTINENT <> H2.CONTINENT;

-- ENDREGION

-- ------------------------------------------------------------------------
-- 2.8) EXISTS KLAUSEL
-- ------------------------------------------------------------------------
-- REGION

-- BESTIMMEN SIE DIE ROUTE MIT DEM HÖCHSTEN WERT FÜR DIE STRECKENLÄNGE
-- (DISTANCE).

-- AUSGABE: NAME, DISTANCE

-- TABELLEN: ROUTES_JT


-- HINWEIS: ES GIBT KEINE ROUTE MIT EINEM HÖHEREN WERT DER STRECKENLÄNGE (DISTANCE)

SELECT R1.NAME, R1.DISTANCE
FROM ROUTES_JT R1
WHERE NOT EXISTS(SELECT * FROM ROUTES_JT R2 WHERE R1.DISTANCE < R2.DISTANCE);


-- ENDREGION

-- ------------------------------------------------------------------------
-- 2.9) EXISTS KLAUSEL
-- ------------------------------------------------------------------------
-- REGION

-- FINDEN SIE ALLE KREUZFAHRTEN, DIE AUF JEDER ZUGEORDNETEN TEILSTRECKE MEHR
-- ALS 500 KM ZURÜCKLEGT.

-- AUSGABE: CRUISE_ID, LABEL

-- TABELLEN: CRUISES, ROUTES_JT, CRUISE_HAS_ROUTES_JT


-- HINWEIS: KEINE, DER DER KREUZFAHRT ZUGEORDNETE TEILSTRECKE IST KÜRZER ALS 500 KM.

SELECT *
FROM CRUISES;
SELECT *
FROM ROUTES_JT;
SELECT *
FROM CRUISE_HAS_ROUTES_JT;

SELECT C.CRUISE_ID, C.LABEL
FROM CRUISES C
WHERE NOT EXISTS(SELECT *
                 FROM CRUISE_HAS_ROUTES_JT CHRJ
                          JOIN ROUTES_JT RJ ON CHRJ.DEPARTURE_HARBOR_ID = RJ.DEPARTURE_HARBOR_ID AND
                                               CHRJ.ARRIVAL_HARBOR_ID = RJ.ARRIVAL_HARBOR_ID
                 WHERE RJ.DISTANCE <= 500
                   AND C.CRUISE_ID = CHRJ.CRUISE_ID)


-- ENDREGION

-- ------------------------------------------------------------------------
-- 2.10) EXISTS KLAUSEL
-- ------------------------------------------------------------------------
-- REGION

-- GESUCHT SIND LÄNDER DEREN HÄFEN NICHT ALLE AUF REISEROUTEN LIEGEN.

-- AUSGABE: NAME

-- TABELLEN: E_COUNTRIES, HARBORS, ROUTES_JT

SELECT *
FROM E_COUNTRIES;
SELECT *
FROM HARBORS;
SELECT *
FROM ROUTES_JT;


SELECT E.NAME
FROM E_COUNTRIES E
WHERE EXISTS(SELECT *
             FROM HARBORS H
             WHERE NOT EXISTS(SELECT *
                              FROM ROUTES_JT R
                              WHERE H.HARBOR_ID IN (R.DEPARTURE_HARBOR_ID, R.ARRIVAL_HARBOR_ID))
               AND H.COUNTRY = E.NAME);

SELECT *
FROM HARBORS H
WHERE NOT EXISTS(SELECT * FROM ROUTES_JT R WHERE H.HARBOR_ID IN (R.DEPARTURE_HARBOR_ID, R.ARRIVAL_HARBOR_ID))

-- ENDREGION


-- ------------------------------------------------------------------------
-- 2.11) EXISTS KLAUSEL
-- ------------------------------------------------------------------------
-- REGION

-- WELCHES SCHIFF WIRD BEI DEN MEISTEN KREUZFAHRTEN EINGESETZT?

-- AUSGABE: SHIP_ID, NAME

-- TABELLEN: CRUISE, SHIP

-- REGION QUERY1: GROUP BY


-- HINWEIS: ES GIBT KEIN SCHIFF DAS AUF MEHR KREUZFAHRTEN EINGESETZT
--          WORDEN IST


-- ENDREGION
