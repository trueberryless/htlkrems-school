
Kompetenzcheck.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000051e  000005b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000051e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800104  00800104  000005b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d01  00000000  00000000  00000700  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000875  00000000  00000000  00001401  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000074a  00000000  00000000  00001c76  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000274  00000000  00000000  000023c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ca  00000000  00000000  00002634  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006e4  00000000  00000000  00002afe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  000031e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__vector_1>
   8:	0c 94 11 02 	jmp	0x422	; 0x422 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 34 02 	jmp	0x468	; 0x468 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e1       	ldi	r30, 0x1E	; 30
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 30       	cpi	r26, 0x06	; 6
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 18 01 	call	0x230	; 0x230 <main>
  9e:	0c 94 8d 02 	jmp	0x51a	; 0x51a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  a6:	88 b1       	in	r24, 0x08	; 8
  a8:	84 60       	ori	r24, 0x04	; 4
  aa:	88 b9       	out	0x08, r24	; 8
  ac:	00 c0       	rjmp	.+0      	; 0xae <toggle_e+0x8>
  ae:	88 b1       	in	r24, 0x08	; 8
  b0:	8b 7f       	andi	r24, 0xFB	; 251
  b2:	88 b9       	out	0x08, r24	; 8
  b4:	08 95       	ret

000000b6 <lcd_write>:
  b6:	cf 93       	push	r28
  b8:	c8 2f       	mov	r28, r24
  ba:	8a b1       	in	r24, 0x0a	; 10
  bc:	80 6f       	ori	r24, 0xF0	; 240
  be:	8a b9       	out	0x0a, r24	; 10
  c0:	88 b1       	in	r24, 0x08	; 8
  c2:	8d 7f       	andi	r24, 0xFD	; 253
  c4:	88 b9       	out	0x08, r24	; 8
  c6:	66 23       	and	r22, r22
  c8:	21 f0       	breq	.+8      	; 0xd2 <lcd_write+0x1c>
  ca:	88 b1       	in	r24, 0x08	; 8
  cc:	81 60       	ori	r24, 0x01	; 1
  ce:	88 b9       	out	0x08, r24	; 8
  d0:	03 c0       	rjmp	.+6      	; 0xd8 <lcd_write+0x22>
  d2:	88 b1       	in	r24, 0x08	; 8
  d4:	8e 7f       	andi	r24, 0xFE	; 254
  d6:	88 b9       	out	0x08, r24	; 8
  d8:	8b b1       	in	r24, 0x0b	; 11
  da:	8f 70       	andi	r24, 0x0F	; 15
  dc:	9c 2f       	mov	r25, r28
  de:	90 7f       	andi	r25, 0xF0	; 240
  e0:	89 2b       	or	r24, r25
  e2:	8b b9       	out	0x0b, r24	; 11
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e8:	2b b1       	in	r18, 0x0b	; 11
  ea:	30 e1       	ldi	r19, 0x10	; 16
  ec:	c3 9f       	mul	r28, r19
  ee:	c0 01       	movw	r24, r0
  f0:	11 24       	eor	r1, r1
  f2:	92 2f       	mov	r25, r18
  f4:	9f 70       	andi	r25, 0x0F	; 15
  f6:	89 2b       	or	r24, r25
  f8:	8b b9       	out	0x0b, r24	; 11
  fa:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  fe:	8b b1       	in	r24, 0x0b	; 11
 100:	80 6f       	ori	r24, 0xF0	; 240
 102:	8b b9       	out	0x0b, r24	; 11
 104:	cf 91       	pop	r28
 106:	08 95       	ret

00000108 <lcd_read>:
 108:	88 23       	and	r24, r24
 10a:	21 f0       	breq	.+8      	; 0x114 <lcd_read+0xc>
 10c:	88 b1       	in	r24, 0x08	; 8
 10e:	81 60       	ori	r24, 0x01	; 1
 110:	88 b9       	out	0x08, r24	; 8
 112:	03 c0       	rjmp	.+6      	; 0x11a <lcd_read+0x12>
 114:	88 b1       	in	r24, 0x08	; 8
 116:	8e 7f       	andi	r24, 0xFE	; 254
 118:	88 b9       	out	0x08, r24	; 8
 11a:	88 b1       	in	r24, 0x08	; 8
 11c:	82 60       	ori	r24, 0x02	; 2
 11e:	88 b9       	out	0x08, r24	; 8
 120:	8a b1       	in	r24, 0x0a	; 10
 122:	8f 70       	andi	r24, 0x0F	; 15
 124:	8a b9       	out	0x0a, r24	; 10
 126:	88 b1       	in	r24, 0x08	; 8
 128:	84 60       	ori	r24, 0x04	; 4
 12a:	88 b9       	out	0x08, r24	; 8
 12c:	00 c0       	rjmp	.+0      	; 0x12e <lcd_read+0x26>
 12e:	29 b1       	in	r18, 0x09	; 9
 130:	88 b1       	in	r24, 0x08	; 8
 132:	8b 7f       	andi	r24, 0xFB	; 251
 134:	88 b9       	out	0x08, r24	; 8
 136:	00 c0       	rjmp	.+0      	; 0x138 <lcd_read+0x30>
 138:	88 b1       	in	r24, 0x08	; 8
 13a:	84 60       	ori	r24, 0x04	; 4
 13c:	88 b9       	out	0x08, r24	; 8
 13e:	00 c0       	rjmp	.+0      	; 0x140 <lcd_read+0x38>
 140:	99 b1       	in	r25, 0x09	; 9
 142:	88 b1       	in	r24, 0x08	; 8
 144:	8b 7f       	andi	r24, 0xFB	; 251
 146:	88 b9       	out	0x08, r24	; 8
 148:	20 7f       	andi	r18, 0xF0	; 240
 14a:	89 2f       	mov	r24, r25
 14c:	82 95       	swap	r24
 14e:	8f 70       	andi	r24, 0x0F	; 15
 150:	82 2b       	or	r24, r18
 152:	08 95       	ret

00000154 <lcd_waitbusy>:
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	0e 94 84 00 	call	0x108	; 0x108 <lcd_read>
 15a:	88 23       	and	r24, r24
 15c:	dc f3       	brlt	.-10     	; 0x154 <lcd_waitbusy>
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	0e 94 84 00 	call	0x108	; 0x108 <lcd_read>
 164:	08 95       	ret

00000166 <lcd_command>:
 166:	cf 93       	push	r28
 168:	c8 2f       	mov	r28, r24
 16a:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_waitbusy>
 16e:	60 e0       	ldi	r22, 0x00	; 0
 170:	8c 2f       	mov	r24, r28
 172:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_write>
 176:	cf 91       	pop	r28
 178:	08 95       	ret

0000017a <lcd_newline>:
 17a:	80 34       	cpi	r24, 0x40	; 64
 17c:	10 f4       	brcc	.+4      	; 0x182 <lcd_newline+0x8>
 17e:	80 e4       	ldi	r24, 0x40	; 64
 180:	01 c0       	rjmp	.+2      	; 0x184 <lcd_newline+0xa>
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	80 58       	subi	r24, 0x80	; 128
 186:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_command>
 18a:	08 95       	ret

0000018c <lcd_clrscr>:
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_command>
 192:	08 95       	ret

00000194 <lcd_putc>:
 194:	cf 93       	push	r28
 196:	c8 2f       	mov	r28, r24
 198:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_waitbusy>
 19c:	ca 30       	cpi	r28, 0x0A	; 10
 19e:	19 f4       	brne	.+6      	; 0x1a6 <lcd_putc+0x12>
 1a0:	0e 94 bd 00 	call	0x17a	; 0x17a <lcd_newline>
 1a4:	04 c0       	rjmp	.+8      	; 0x1ae <lcd_putc+0x1a>
 1a6:	61 e0       	ldi	r22, 0x01	; 1
 1a8:	8c 2f       	mov	r24, r28
 1aa:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_write>
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1b2:	cf 93       	push	r28
 1b4:	c8 2f       	mov	r28, r24
#if LCD_IO_MODE
    /*
     *  Initialize LCD to 4 bit I/O mode
     */

    DDR(LCD_DATA_PORT) |= 0xF0;
 1b6:	8a b1       	in	r24, 0x0a	; 10
 1b8:	80 6f       	ori	r24, 0xF0	; 240
 1ba:	8a b9       	out	0x0a, r24	; 10
    DDR(LCD_RS_PORT) |= _BV(LCD_RS_PIN);
 1bc:	87 b1       	in	r24, 0x07	; 7
 1be:	81 60       	ori	r24, 0x01	; 1
 1c0:	87 b9       	out	0x07, r24	; 7
    lcd_rs_low();
 1c2:	88 b1       	in	r24, 0x08	; 8
 1c4:	8e 7f       	andi	r24, 0xFE	; 254
 1c6:	88 b9       	out	0x08, r24	; 8
    DDR(LCD_RW_PORT) |= _BV(LCD_RW_PIN);
 1c8:	87 b1       	in	r24, 0x07	; 7
 1ca:	82 60       	ori	r24, 0x02	; 2
 1cc:	87 b9       	out	0x07, r24	; 7
    lcd_rw_low();
 1ce:	88 b1       	in	r24, 0x08	; 8
 1d0:	8d 7f       	andi	r24, 0xFD	; 253
 1d2:	88 b9       	out	0x08, r24	; 8
    DDR(LCD_E_PORT) |= _BV(LCD_E_PIN);
 1d4:	87 b1       	in	r24, 0x07	; 7
 1d6:	84 60       	ori	r24, 0x04	; 4
 1d8:	87 b9       	out	0x07, r24	; 7
    lcd_e_low();
 1da:	88 b1       	in	r24, 0x08	; 8
 1dc:	8b 7f       	andi	r24, 0xFB	; 251
 1de:	88 b9       	out	0x08, r24	; 8
    delay(16000);                           /* wait 16ms after power-on     */

    /* initial write to lcd is 8bit */
    set_data(LCD_FUNCTION_8BIT_1LINE);
 1e0:	8b b1       	in	r24, 0x0b	; 11
 1e2:	8f 70       	andi	r24, 0x0F	; 15
 1e4:	80 63       	ori	r24, 0x30	; 48
 1e6:	8b b9       	out	0x0b, r24	; 11

    lcd_e_toggle();
 1e8:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
    delay(4992);         /* delay, busy flag can't be checked here */

    set_data(LCD_FUNCTION_8BIT_1LINE);
 1ec:	8b b1       	in	r24, 0x0b	; 11
 1ee:	8f 70       	andi	r24, 0x0F	; 15
 1f0:	80 63       	ori	r24, 0x30	; 48
 1f2:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 1f4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
    delay(64);           /* delay, busy flag can't be checked here */

    set_data(LCD_FUNCTION_8BIT_1LINE);
 1f8:	8b b1       	in	r24, 0x0b	; 11
 1fa:	8f 70       	andi	r24, 0x0F	; 15
 1fc:	80 63       	ori	r24, 0x30	; 48
 1fe:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 200:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
    delay(64);           /* delay, busy flag can't be checked here */

    set_data(LCD_FUNCTION_4BIT_1LINE); /* set IO mode to 4bit */
 204:	8b b1       	in	r24, 0x0b	; 11
 206:	8f 70       	andi	r24, 0x0F	; 15
 208:	80 62       	ori	r24, 0x20	; 32
 20a:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 20c:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
    lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */
    delay(64);                              /* wait 64us                    */
    lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */
    delay(64);                              /* wait 64us                    */
#endif
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 210:	88 e2       	ldi	r24, 0x28	; 40
 212:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_command>
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 216:	88 e0       	ldi	r24, 0x08	; 8
 218:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_command>
    lcd_clrscr();                           /* display clear                */
 21c:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 220:	86 e0       	ldi	r24, 0x06	; 6
 222:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 226:	8c 2f       	mov	r24, r28
 228:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_command>

}/* lcd_init */
 22c:	cf 91       	pop	r28
 22e:	08 95       	ret

00000230 <main>:
volatile int cntSec = 1;

int main(void)
{
	// LED config
	DDRB |= (1<<DDB0) | (1<<DDB1);
 230:	84 b1       	in	r24, 0x04	; 4
 232:	83 60       	ori	r24, 0x03	; 3
 234:	84 b9       	out	0x04, r24	; 4
	
	// LCD config
	lcd_init(LCD_DISP_ON);
 236:	8c e0       	ldi	r24, 0x0C	; 12
 238:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_init>
	
	// USART config
	// set Baud Rate 9600
	UBRR0 = 103;
 23c:	87 e6       	ldi	r24, 0x67	; 103
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 244:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	// activate receiving
	UCSR0B |= (1<<RXEN0) | (1<<RXCIE0);
 248:	e1 ec       	ldi	r30, 0xC1	; 193
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	80 69       	ori	r24, 0x90	; 144
 250:	80 83       	st	Z, r24
	// setup 8-bit
	UCSR0C |= (1<<UCSZ00) | (1<<UCSZ01);
 252:	e2 ec       	ldi	r30, 0xC2	; 194
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	86 60       	ori	r24, 0x06	; 6
 25a:	80 83       	st	Z, r24
	
	// ADC config
	// REFS0: Aufgrund der Beschaltung des ADCs.
	// A3: Analoges Signal an PC5 => MUX0 | MUX3
	ADMUX |= (1<<REFS0) | (1<<MUX0) | (1<<MUX2);	
 25c:	ec e7       	ldi	r30, 0x7C	; 124
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	80 81       	ld	r24, Z
 262:	85 64       	ori	r24, 0x45	; 69
 264:	80 83       	st	Z, r24
	// ADEN => Enables ADC
	// ADPSx => Division Factor to get between 50kHz and 200kHz with our 60MHz Elegoo.
	ADCSRA |= (1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);	
 266:	ea e7       	ldi	r30, 0x7A	; 122
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	87 68       	ori	r24, 0x87	; 135
 26e:	80 83       	st	Z, r24
	// ADC Interrupt
	ADCSRA |= (1<<ADIE);
 270:	80 81       	ld	r24, Z
 272:	88 60       	ori	r24, 0x08	; 8
 274:	80 83       	st	Z, r24
	
	// Button config
	PORTD |= (1<<PORTD2) | (1<<PORTD3);
 276:	8b b1       	in	r24, 0x0b	; 11
 278:	8c 60       	ori	r24, 0x0C	; 12
 27a:	8b b9       	out	0x0b, r24	; 11
	EIMSK |= (1<<INT0) | (1<<INT1);
 27c:	8d b3       	in	r24, 0x1d	; 29
 27e:	83 60       	ori	r24, 0x03	; 3
 280:	8d bb       	out	0x1d, r24	; 29
	
	// Timer config
	// CTC Mode
	TCCR1A |= (1<<WGM12);
 282:	a0 e8       	ldi	r26, 0x80	; 128
 284:	b0 e0       	ldi	r27, 0x00	; 0
 286:	8c 91       	ld	r24, X
 288:	88 60       	ori	r24, 0x08	; 8
 28a:	8c 93       	st	X, r24
	
	// Output Compare A and B Interrupt
	TIMSK1 |= (1<<OCIE1A);
 28c:	af e6       	ldi	r26, 0x6F	; 111
 28e:	b0 e0       	ldi	r27, 0x00	; 0
 290:	8c 91       	ld	r24, X
 292:	82 60       	ori	r24, 0x02	; 2
 294:	8c 93       	st	X, r24
	
	sei();
 296:	78 94       	sei
	
	// ADSC => Start Conversion
	ADCSRA |= (1<<ADSC);
 298:	80 81       	ld	r24, Z
 29a:	80 64       	ori	r24, 0x40	; 64
 29c:	80 83       	st	Z, r24
 29e:	ff cf       	rjmp	.-2      	; 0x29e <main+0x6e>

000002a0 <__vector_11>:
    while (1) 
    {
    }
}

ISR(TIMER1_COMPA_vect) {
 2a0:	1f 92       	push	r1
 2a2:	0f 92       	push	r0
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	0f 92       	push	r0
 2a8:	11 24       	eor	r1, r1
 2aa:	2f 93       	push	r18
 2ac:	3f 93       	push	r19
 2ae:	4f 93       	push	r20
 2b0:	5f 93       	push	r21
 2b2:	6f 93       	push	r22
 2b4:	7f 93       	push	r23
 2b6:	8f 93       	push	r24
 2b8:	9f 93       	push	r25
 2ba:	af 93       	push	r26
 2bc:	bf 93       	push	r27
 2be:	ef 93       	push	r30
 2c0:	ff 93       	push	r31
	if (direction_up)
 2c2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <direction_up>
 2c6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <direction_up+0x1>
 2ca:	89 2b       	or	r24, r25
 2cc:	e9 f1       	breq	.+122    	; 0x348 <__vector_11+0xa8>
	{
		if (cntSec == 8)
 2ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2d2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2d6:	08 97       	sbiw	r24, 0x08	; 8
 2d8:	01 f5       	brne	.+64     	; 0x31a <__vector_11+0x7a>
		{
			lcd_putc('|');
 2da:	8c e7       	ldi	r24, 0x7C	; 124
 2dc:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_putc>
			lcd_putc('|');
 2e0:	8c e7       	ldi	r24, 0x7C	; 124
 2e2:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_putc>
			PORTB |= (1<<PORTB0);
 2e6:	85 b1       	in	r24, 0x05	; 5
 2e8:	81 60       	ori	r24, 0x01	; 1
 2ea:	85 b9       	out	0x05, r24	; 5
			PORTB &= ~(1<<PORTB1);
 2ec:	85 b1       	in	r24, 0x05	; 5
 2ee:	8d 7f       	andi	r24, 0xFD	; 253
 2f0:	85 b9       	out	0x05, r24	; 5
			blinds_opened = 1;
 2f2:	21 e0       	ldi	r18, 0x01	; 1
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <__data_end+0x1>
 2fa:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <__data_end>
			
			TCCR1B &= ~(1<<CS12); // Timer stoppen
 2fe:	e1 e8       	ldi	r30, 0x81	; 129
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	80 81       	ld	r24, Z
 304:	8b 7f       	andi	r24, 0xFB	; 251
 306:	80 83       	st	Z, r24
			TCNT1H = 0;
 308:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
			TCNT1L = 0;
 30c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
			
			cntSec = 1;
 310:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_start+0x1>
 314:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
 318:	52 c0       	rjmp	.+164    	; 0x3be <__vector_11+0x11e>
		}
		else {
			cntSec++;
 31a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 31e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 322:	01 96       	adiw	r24, 0x01	; 1
 324:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 328:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			if (!blinds_opened)
 32c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 330:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 334:	89 2b       	or	r24, r25
 336:	09 f0       	breq	.+2      	; 0x33a <__vector_11+0x9a>
 338:	42 c0       	rjmp	.+132    	; 0x3be <__vector_11+0x11e>
			{
				lcd_putc('|');
 33a:	8c e7       	ldi	r24, 0x7C	; 124
 33c:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_putc>
				lcd_putc('|');
 340:	8c e7       	ldi	r24, 0x7C	; 124
 342:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_putc>
 346:	3b c0       	rjmp	.+118    	; 0x3be <__vector_11+0x11e>
			}
		}
	}
	else {		
		if (cntSec == 8)
 348:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 34c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 350:	08 97       	sbiw	r24, 0x08	; 8
 352:	01 f5       	brne	.+64     	; 0x394 <__vector_11+0xf4>
		{
			lcd_command(LCD_MOVE_DISP_LEFT);
 354:	88 e1       	ldi	r24, 0x18	; 24
 356:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_command>
			lcd_command(LCD_MOVE_DISP_LEFT);
 35a:	88 e1       	ldi	r24, 0x18	; 24
 35c:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_command>
			PORTB |= (1<<PORTB1);
 360:	85 b1       	in	r24, 0x05	; 5
 362:	82 60       	ori	r24, 0x02	; 2
 364:	85 b9       	out	0x05, r24	; 5
			PORTB &= ~(1<<PORTB0);
 366:	85 b1       	in	r24, 0x05	; 5
 368:	8e 7f       	andi	r24, 0xFE	; 254
 36a:	85 b9       	out	0x05, r24	; 5
			blinds_opened = 0;
 36c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x1>
 370:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
			
			TCCR1B &= ~(1<<CS12); // Timer stoppen
 374:	e1 e8       	ldi	r30, 0x81	; 129
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	80 81       	ld	r24, Z
 37a:	8b 7f       	andi	r24, 0xFB	; 251
 37c:	80 83       	st	Z, r24
			TCNT1 = 0;
 37e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 382:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
			
			cntSec = 1;
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 38e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 392:	15 c0       	rjmp	.+42     	; 0x3be <__vector_11+0x11e>
		}
		else {
			cntSec++;
 394:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 398:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 39c:	01 96       	adiw	r24, 0x01	; 1
 39e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 3a2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			if (blinds_opened)
 3a6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 3aa:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 3ae:	89 2b       	or	r24, r25
 3b0:	31 f0       	breq	.+12     	; 0x3be <__vector_11+0x11e>
			{
				lcd_command(LCD_MOVE_DISP_LEFT);
 3b2:	88 e1       	ldi	r24, 0x18	; 24
 3b4:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_command>
				lcd_command(LCD_MOVE_DISP_LEFT);
 3b8:	88 e1       	ldi	r24, 0x18	; 24
 3ba:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_command>
			}
		}
	}
}
 3be:	ff 91       	pop	r31
 3c0:	ef 91       	pop	r30
 3c2:	bf 91       	pop	r27
 3c4:	af 91       	pop	r26
 3c6:	9f 91       	pop	r25
 3c8:	8f 91       	pop	r24
 3ca:	7f 91       	pop	r23
 3cc:	6f 91       	pop	r22
 3ce:	5f 91       	pop	r21
 3d0:	4f 91       	pop	r20
 3d2:	3f 91       	pop	r19
 3d4:	2f 91       	pop	r18
 3d6:	0f 90       	pop	r0
 3d8:	0f be       	out	0x3f, r0	; 63
 3da:	0f 90       	pop	r0
 3dc:	1f 90       	pop	r1
 3de:	18 95       	reti

000003e0 <__vector_1>:

ISR(INT0_vect) {
 3e0:	1f 92       	push	r1
 3e2:	0f 92       	push	r0
 3e4:	0f b6       	in	r0, 0x3f	; 63
 3e6:	0f 92       	push	r0
 3e8:	11 24       	eor	r1, r1
 3ea:	8f 93       	push	r24
 3ec:	9f 93       	push	r25
 3ee:	ef 93       	push	r30
 3f0:	ff 93       	push	r31
	direction_up = 0;
 3f2:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <direction_up+0x1>
 3f6:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <direction_up>
	OCR1A = 62500;
 3fa:	84 e2       	ldi	r24, 0x24	; 36
 3fc:	94 ef       	ldi	r25, 0xF4	; 244
 3fe:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 402:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	// Prescaler 256: 1048.5ms + hiermit wird der Timer gestartet
	TCCR1B |= (1<<CS12);
 406:	e1 e8       	ldi	r30, 0x81	; 129
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	80 81       	ld	r24, Z
 40c:	84 60       	ori	r24, 0x04	; 4
 40e:	80 83       	st	Z, r24
}
 410:	ff 91       	pop	r31
 412:	ef 91       	pop	r30
 414:	9f 91       	pop	r25
 416:	8f 91       	pop	r24
 418:	0f 90       	pop	r0
 41a:	0f be       	out	0x3f, r0	; 63
 41c:	0f 90       	pop	r0
 41e:	1f 90       	pop	r1
 420:	18 95       	reti

00000422 <__vector_2>:

ISR(INT1_vect) {
 422:	1f 92       	push	r1
 424:	0f 92       	push	r0
 426:	0f b6       	in	r0, 0x3f	; 63
 428:	0f 92       	push	r0
 42a:	11 24       	eor	r1, r1
 42c:	8f 93       	push	r24
 42e:	9f 93       	push	r25
 430:	ef 93       	push	r30
 432:	ff 93       	push	r31
	direction_up = 1;
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <direction_up+0x1>
 43c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <direction_up>
	OCR1A = 62500;
 440:	84 e2       	ldi	r24, 0x24	; 36
 442:	94 ef       	ldi	r25, 0xF4	; 244
 444:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 448:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	// Prescaler 256: 1048.5ms + hiermit wird der Timer gestartet
	TCCR1B |= (1<<CS12);
 44c:	e1 e8       	ldi	r30, 0x81	; 129
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	80 81       	ld	r24, Z
 452:	84 60       	ori	r24, 0x04	; 4
 454:	80 83       	st	Z, r24
}
 456:	ff 91       	pop	r31
 458:	ef 91       	pop	r30
 45a:	9f 91       	pop	r25
 45c:	8f 91       	pop	r24
 45e:	0f 90       	pop	r0
 460:	0f be       	out	0x3f, r0	; 63
 462:	0f 90       	pop	r0
 464:	1f 90       	pop	r1
 466:	18 95       	reti

00000468 <__vector_21>:

ISR(ADC_vect) {
 468:	1f 92       	push	r1
 46a:	0f 92       	push	r0
 46c:	0f b6       	in	r0, 0x3f	; 63
 46e:	0f 92       	push	r0
 470:	11 24       	eor	r1, r1
 472:	8f 93       	push	r24
 474:	9f 93       	push	r25
 476:	ef 93       	push	r30
 478:	ff 93       	push	r31
	if (blinds_opened == 1) {
 47a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 47e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 482:	01 97       	sbiw	r24, 0x01	; 1
 484:	89 f4       	brne	.+34     	; 0x4a8 <__vector_21+0x40>
		if (ADCW < 100)
 486:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 48a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 48e:	84 36       	cpi	r24, 0x64	; 100
 490:	91 05       	cpc	r25, r1
 492:	50 f4       	brcc	.+20     	; 0x4a8 <__vector_21+0x40>
		{
			PORTB |= (1<<PORTB1);
 494:	85 b1       	in	r24, 0x05	; 5
 496:	82 60       	ori	r24, 0x02	; 2
 498:	85 b9       	out	0x05, r24	; 5
			PORTB &= ~(1<<PORTB0);
 49a:	85 b1       	in	r24, 0x05	; 5
 49c:	8e 7f       	andi	r24, 0xFE	; 254
 49e:	85 b9       	out	0x05, r24	; 5
			blinds_opened = 0;
 4a0:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x1>
 4a4:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
	//sprintf(buffer, "ADCW: %u\nT: %u", ADCW, TCNT1);
	//lcd_clrscr();
	//lcd_puts(buffer);
	
	// ADSC => Start Conversion
	ADCSRA |= (1<<ADSC);
 4a8:	ea e7       	ldi	r30, 0x7A	; 122
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	80 81       	ld	r24, Z
 4ae:	80 64       	ori	r24, 0x40	; 64
 4b0:	80 83       	st	Z, r24
}
 4b2:	ff 91       	pop	r31
 4b4:	ef 91       	pop	r30
 4b6:	9f 91       	pop	r25
 4b8:	8f 91       	pop	r24
 4ba:	0f 90       	pop	r0
 4bc:	0f be       	out	0x3f, r0	; 63
 4be:	0f 90       	pop	r0
 4c0:	1f 90       	pop	r1
 4c2:	18 95       	reti

000004c4 <__vector_18>:

ISR(USART_RX_vect) {
 4c4:	1f 92       	push	r1
 4c6:	0f 92       	push	r0
 4c8:	0f b6       	in	r0, 0x3f	; 63
 4ca:	0f 92       	push	r0
 4cc:	11 24       	eor	r1, r1
 4ce:	8f 93       	push	r24
 4d0:	9f 93       	push	r25
	uint8_t tmp;
	tmp = UDR0;
 4d2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	
	if (tmp == 'd')
 4d6:	84 36       	cpi	r24, 0x64	; 100
 4d8:	59 f4       	brne	.+22     	; 0x4f0 <__vector_18+0x2c>
	{
		PORTB |= (1<<PORTB1);
 4da:	85 b1       	in	r24, 0x05	; 5
 4dc:	82 60       	ori	r24, 0x02	; 2
 4de:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1<<PORTB0);
 4e0:	85 b1       	in	r24, 0x05	; 5
 4e2:	8e 7f       	andi	r24, 0xFE	; 254
 4e4:	85 b9       	out	0x05, r24	; 5
		blinds_opened = 0;		
 4e6:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x1>
 4ea:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
 4ee:	0e c0       	rjmp	.+28     	; 0x50c <__vector_18+0x48>
	}
	else if (tmp == 'u')
 4f0:	85 37       	cpi	r24, 0x75	; 117
 4f2:	61 f4       	brne	.+24     	; 0x50c <__vector_18+0x48>
	{
		PORTB |= (1<<PORTB0);
 4f4:	85 b1       	in	r24, 0x05	; 5
 4f6:	81 60       	ori	r24, 0x01	; 1
 4f8:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1<<PORTB1);
 4fa:	85 b1       	in	r24, 0x05	; 5
 4fc:	8d 7f       	andi	r24, 0xFD	; 253
 4fe:	85 b9       	out	0x05, r24	; 5
		blinds_opened = 1;		
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 508:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
	}
 50c:	9f 91       	pop	r25
 50e:	8f 91       	pop	r24
 510:	0f 90       	pop	r0
 512:	0f be       	out	0x3f, r0	; 63
 514:	0f 90       	pop	r0
 516:	1f 90       	pop	r1
 518:	18 95       	reti

0000051a <_exit>:
 51a:	f8 94       	cli

0000051c <__stop_program>:
 51c:	ff cf       	rjmp	.-2      	; 0x51c <__stop_program>
