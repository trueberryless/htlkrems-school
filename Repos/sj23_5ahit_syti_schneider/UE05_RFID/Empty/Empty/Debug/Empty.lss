
Empty.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000252  000002c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000252  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ba0  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000080f  00000000  00000000  00000f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000507  00000000  00000000  0000179b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000168  00000000  00000000  00001ca4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000432  00000000  00000000  00001e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000489  00000000  00000000  0000223e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  000026c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e5       	ldi	r30, 0x52	; 82
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 1f 01 	call	0x23e	; 0x23e <main>
  8e:	0c 94 27 01 	jmp	0x24e	; 0x24e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  96:	88 b1       	in	r24, 0x08	; 8
  98:	84 60       	ori	r24, 0x04	; 4
  9a:	88 b9       	out	0x08, r24	; 8
  9c:	00 c0       	rjmp	.+0      	; 0x9e <toggle_e+0x8>
  9e:	88 b1       	in	r24, 0x08	; 8
  a0:	8b 7f       	andi	r24, 0xFB	; 251
  a2:	88 b9       	out	0x08, r24	; 8
  a4:	08 95       	ret

000000a6 <lcd_write>:
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
  aa:	8a b1       	in	r24, 0x0a	; 10
  ac:	80 6f       	ori	r24, 0xF0	; 240
  ae:	8a b9       	out	0x0a, r24	; 10
  b0:	88 b1       	in	r24, 0x08	; 8
  b2:	8d 7f       	andi	r24, 0xFD	; 253
  b4:	88 b9       	out	0x08, r24	; 8
  b6:	66 23       	and	r22, r22
  b8:	21 f0       	breq	.+8      	; 0xc2 <lcd_write+0x1c>
  ba:	88 b1       	in	r24, 0x08	; 8
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	88 b9       	out	0x08, r24	; 8
  c0:	03 c0       	rjmp	.+6      	; 0xc8 <lcd_write+0x22>
  c2:	88 b1       	in	r24, 0x08	; 8
  c4:	8e 7f       	andi	r24, 0xFE	; 254
  c6:	88 b9       	out	0x08, r24	; 8
  c8:	8b b1       	in	r24, 0x0b	; 11
  ca:	8f 70       	andi	r24, 0x0F	; 15
  cc:	9c 2f       	mov	r25, r28
  ce:	90 7f       	andi	r25, 0xF0	; 240
  d0:	89 2b       	or	r24, r25
  d2:	8b b9       	out	0x0b, r24	; 11
  d4:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
  d8:	2b b1       	in	r18, 0x0b	; 11
  da:	30 e1       	ldi	r19, 0x10	; 16
  dc:	c3 9f       	mul	r28, r19
  de:	c0 01       	movw	r24, r0
  e0:	11 24       	eor	r1, r1
  e2:	92 2f       	mov	r25, r18
  e4:	9f 70       	andi	r25, 0x0F	; 15
  e6:	89 2b       	or	r24, r25
  e8:	8b b9       	out	0x0b, r24	; 11
  ea:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
  ee:	8b b1       	in	r24, 0x0b	; 11
  f0:	80 6f       	ori	r24, 0xF0	; 240
  f2:	8b b9       	out	0x0b, r24	; 11
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <lcd_read>:
  f8:	88 23       	and	r24, r24
  fa:	21 f0       	breq	.+8      	; 0x104 <lcd_read+0xc>
  fc:	88 b1       	in	r24, 0x08	; 8
  fe:	81 60       	ori	r24, 0x01	; 1
 100:	88 b9       	out	0x08, r24	; 8
 102:	03 c0       	rjmp	.+6      	; 0x10a <lcd_read+0x12>
 104:	88 b1       	in	r24, 0x08	; 8
 106:	8e 7f       	andi	r24, 0xFE	; 254
 108:	88 b9       	out	0x08, r24	; 8
 10a:	88 b1       	in	r24, 0x08	; 8
 10c:	82 60       	ori	r24, 0x02	; 2
 10e:	88 b9       	out	0x08, r24	; 8
 110:	8a b1       	in	r24, 0x0a	; 10
 112:	8f 70       	andi	r24, 0x0F	; 15
 114:	8a b9       	out	0x0a, r24	; 10
 116:	88 b1       	in	r24, 0x08	; 8
 118:	84 60       	ori	r24, 0x04	; 4
 11a:	88 b9       	out	0x08, r24	; 8
 11c:	00 c0       	rjmp	.+0      	; 0x11e <lcd_read+0x26>
 11e:	29 b1       	in	r18, 0x09	; 9
 120:	88 b1       	in	r24, 0x08	; 8
 122:	8b 7f       	andi	r24, 0xFB	; 251
 124:	88 b9       	out	0x08, r24	; 8
 126:	00 c0       	rjmp	.+0      	; 0x128 <lcd_read+0x30>
 128:	88 b1       	in	r24, 0x08	; 8
 12a:	84 60       	ori	r24, 0x04	; 4
 12c:	88 b9       	out	0x08, r24	; 8
 12e:	00 c0       	rjmp	.+0      	; 0x130 <lcd_read+0x38>
 130:	99 b1       	in	r25, 0x09	; 9
 132:	88 b1       	in	r24, 0x08	; 8
 134:	8b 7f       	andi	r24, 0xFB	; 251
 136:	88 b9       	out	0x08, r24	; 8
 138:	20 7f       	andi	r18, 0xF0	; 240
 13a:	89 2f       	mov	r24, r25
 13c:	82 95       	swap	r24
 13e:	8f 70       	andi	r24, 0x0F	; 15
 140:	82 2b       	or	r24, r18
 142:	08 95       	ret

00000144 <lcd_waitbusy>:
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_read>
 14a:	88 23       	and	r24, r24
 14c:	dc f3       	brlt	.-10     	; 0x144 <lcd_waitbusy>
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_read>
 154:	08 95       	ret

00000156 <lcd_command>:
 156:	cf 93       	push	r28
 158:	c8 2f       	mov	r28, r24
 15a:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_waitbusy>
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	8c 2f       	mov	r24, r28
 162:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write>
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <lcd_newline>:
 16a:	80 34       	cpi	r24, 0x40	; 64
 16c:	10 f4       	brcc	.+4      	; 0x172 <lcd_newline+0x8>
 16e:	80 e4       	ldi	r24, 0x40	; 64
 170:	01 c0       	rjmp	.+2      	; 0x174 <lcd_newline+0xa>
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	80 58       	subi	r24, 0x80	; 128
 176:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_command>
 17a:	08 95       	ret

0000017c <lcd_clrscr>:
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_command>
 182:	08 95       	ret

00000184 <lcd_putc>:
 184:	cf 93       	push	r28
 186:	c8 2f       	mov	r28, r24
 188:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_waitbusy>
 18c:	ca 30       	cpi	r28, 0x0A	; 10
 18e:	19 f4       	brne	.+6      	; 0x196 <lcd_putc+0x12>
 190:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_newline>
 194:	04 c0       	rjmp	.+8      	; 0x19e <lcd_putc+0x1a>
 196:	61 e0       	ldi	r22, 0x01	; 1
 198:	8c 2f       	mov	r24, r28
 19a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write>
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <lcd_puts>:
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	fc 01       	movw	r30, r24
 1a8:	03 c0       	rjmp	.+6      	; 0x1b0 <lcd_puts+0xe>
 1aa:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_putc>
 1ae:	fe 01       	movw	r30, r28
 1b0:	ef 01       	movw	r28, r30
 1b2:	21 96       	adiw	r28, 0x01	; 1
 1b4:	80 81       	ld	r24, Z
 1b6:	81 11       	cpse	r24, r1
 1b8:	f8 cf       	rjmp	.-16     	; 0x1aa <lcd_puts+0x8>
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	08 95       	ret

000001c0 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1c0:	cf 93       	push	r28
 1c2:	c8 2f       	mov	r28, r24
#if LCD_IO_MODE
    /*
     *  Initialize LCD to 4 bit I/O mode
     */

    DDR(LCD_DATA_PORT) |= 0xF0;
 1c4:	8a b1       	in	r24, 0x0a	; 10
 1c6:	80 6f       	ori	r24, 0xF0	; 240
 1c8:	8a b9       	out	0x0a, r24	; 10
    DDR(LCD_RS_PORT) |= _BV(LCD_RS_PIN);
 1ca:	87 b1       	in	r24, 0x07	; 7
 1cc:	81 60       	ori	r24, 0x01	; 1
 1ce:	87 b9       	out	0x07, r24	; 7
    lcd_rs_low();
 1d0:	88 b1       	in	r24, 0x08	; 8
 1d2:	8e 7f       	andi	r24, 0xFE	; 254
 1d4:	88 b9       	out	0x08, r24	; 8
    DDR(LCD_RW_PORT) |= _BV(LCD_RW_PIN);
 1d6:	87 b1       	in	r24, 0x07	; 7
 1d8:	82 60       	ori	r24, 0x02	; 2
 1da:	87 b9       	out	0x07, r24	; 7
    lcd_rw_low();
 1dc:	88 b1       	in	r24, 0x08	; 8
 1de:	8d 7f       	andi	r24, 0xFD	; 253
 1e0:	88 b9       	out	0x08, r24	; 8
    DDR(LCD_E_PORT) |= _BV(LCD_E_PIN);
 1e2:	87 b1       	in	r24, 0x07	; 7
 1e4:	84 60       	ori	r24, 0x04	; 4
 1e6:	87 b9       	out	0x07, r24	; 7
    lcd_e_low();
 1e8:	88 b1       	in	r24, 0x08	; 8
 1ea:	8b 7f       	andi	r24, 0xFB	; 251
 1ec:	88 b9       	out	0x08, r24	; 8
    delay(16000);                           /* wait 16ms after power-on     */

    /* initial write to lcd is 8bit */
    set_data(LCD_FUNCTION_8BIT_1LINE);
 1ee:	8b b1       	in	r24, 0x0b	; 11
 1f0:	8f 70       	andi	r24, 0x0F	; 15
 1f2:	80 63       	ori	r24, 0x30	; 48
 1f4:	8b b9       	out	0x0b, r24	; 11

    lcd_e_toggle();
 1f6:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
    delay(4992);         /* delay, busy flag can't be checked here */

    set_data(LCD_FUNCTION_8BIT_1LINE);
 1fa:	8b b1       	in	r24, 0x0b	; 11
 1fc:	8f 70       	andi	r24, 0x0F	; 15
 1fe:	80 63       	ori	r24, 0x30	; 48
 200:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 202:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
    delay(64);           /* delay, busy flag can't be checked here */

    set_data(LCD_FUNCTION_8BIT_1LINE);
 206:	8b b1       	in	r24, 0x0b	; 11
 208:	8f 70       	andi	r24, 0x0F	; 15
 20a:	80 63       	ori	r24, 0x30	; 48
 20c:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 20e:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
    delay(64);           /* delay, busy flag can't be checked here */

    set_data(LCD_FUNCTION_4BIT_1LINE); /* set IO mode to 4bit */
 212:	8b b1       	in	r24, 0x0b	; 11
 214:	8f 70       	andi	r24, 0x0F	; 15
 216:	80 62       	ori	r24, 0x20	; 32
 218:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 21a:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
    lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */
    delay(64);                              /* wait 64us                    */
    lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */
    delay(64);                              /* wait 64us                    */
#endif
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 21e:	88 e2       	ldi	r24, 0x28	; 40
 220:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_command>
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 224:	88 e0       	ldi	r24, 0x08	; 8
 226:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_command>
    lcd_clrscr();                           /* display clear                */
 22a:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 22e:	86 e0       	ldi	r24, 0x06	; 6
 230:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 234:	8c 2f       	mov	r24, r28
 236:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_command>

}/* lcd_init */
 23a:	cf 91       	pop	r28
 23c:	08 95       	ret

0000023e <main>:
#include "lcd.h"


int main(void)
{
	lcd_init(LCD_DISP_ON);
 23e:	8c e0       	ldi	r24, 0x0C	; 12
 240:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_init>
	lcd_puts("Works");
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	91 e0       	ldi	r25, 0x01	; 1
 248:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_puts>
 24c:	ff cf       	rjmp	.-2      	; 0x24c <main+0xe>

0000024e <_exit>:
 24e:	f8 94       	cli

00000250 <__stop_program>:
 250:	ff cf       	rjmp	.-2      	; 0x250 <__stop_program>
