
UE05_RFID.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00000ccc  00000d40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ccc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000d78  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dd4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000128  00000000  00000000  00000e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000014fe  00000000  00000000  00000f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a8c  00000000  00000000  0000243a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000acd  00000000  00000000  00002ec6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002d0  00000000  00000000  00003994  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005c5  00000000  00000000  00003c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000cd5  00000000  00000000  00004229  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e8  00000000  00000000  00004efe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ec       	ldi	r30, 0xCC	; 204
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 33       	cpi	r26, 0x38	; 56
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 1f 01 	call	0x23e	; 0x23e <main>
  8e:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  96:	88 b1       	in	r24, 0x08	; 8
  98:	84 60       	ori	r24, 0x04	; 4
  9a:	88 b9       	out	0x08, r24	; 8
  9c:	00 c0       	rjmp	.+0      	; 0x9e <toggle_e+0x8>
  9e:	88 b1       	in	r24, 0x08	; 8
  a0:	8b 7f       	andi	r24, 0xFB	; 251
  a2:	88 b9       	out	0x08, r24	; 8
  a4:	08 95       	ret

000000a6 <lcd_write>:
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
  aa:	8a b1       	in	r24, 0x0a	; 10
  ac:	80 6f       	ori	r24, 0xF0	; 240
  ae:	8a b9       	out	0x0a, r24	; 10
  b0:	88 b1       	in	r24, 0x08	; 8
  b2:	8d 7f       	andi	r24, 0xFD	; 253
  b4:	88 b9       	out	0x08, r24	; 8
  b6:	66 23       	and	r22, r22
  b8:	21 f0       	breq	.+8      	; 0xc2 <lcd_write+0x1c>
  ba:	88 b1       	in	r24, 0x08	; 8
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	88 b9       	out	0x08, r24	; 8
  c0:	03 c0       	rjmp	.+6      	; 0xc8 <lcd_write+0x22>
  c2:	88 b1       	in	r24, 0x08	; 8
  c4:	8e 7f       	andi	r24, 0xFE	; 254
  c6:	88 b9       	out	0x08, r24	; 8
  c8:	8b b1       	in	r24, 0x0b	; 11
  ca:	8f 70       	andi	r24, 0x0F	; 15
  cc:	9c 2f       	mov	r25, r28
  ce:	90 7f       	andi	r25, 0xF0	; 240
  d0:	89 2b       	or	r24, r25
  d2:	8b b9       	out	0x0b, r24	; 11
  d4:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
  d8:	2b b1       	in	r18, 0x0b	; 11
  da:	30 e1       	ldi	r19, 0x10	; 16
  dc:	c3 9f       	mul	r28, r19
  de:	c0 01       	movw	r24, r0
  e0:	11 24       	eor	r1, r1
  e2:	92 2f       	mov	r25, r18
  e4:	9f 70       	andi	r25, 0x0F	; 15
  e6:	89 2b       	or	r24, r25
  e8:	8b b9       	out	0x0b, r24	; 11
  ea:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
  ee:	8b b1       	in	r24, 0x0b	; 11
  f0:	80 6f       	ori	r24, 0xF0	; 240
  f2:	8b b9       	out	0x0b, r24	; 11
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <lcd_read>:
  f8:	88 23       	and	r24, r24
  fa:	21 f0       	breq	.+8      	; 0x104 <lcd_read+0xc>
  fc:	88 b1       	in	r24, 0x08	; 8
  fe:	81 60       	ori	r24, 0x01	; 1
 100:	88 b9       	out	0x08, r24	; 8
 102:	03 c0       	rjmp	.+6      	; 0x10a <lcd_read+0x12>
 104:	88 b1       	in	r24, 0x08	; 8
 106:	8e 7f       	andi	r24, 0xFE	; 254
 108:	88 b9       	out	0x08, r24	; 8
 10a:	88 b1       	in	r24, 0x08	; 8
 10c:	82 60       	ori	r24, 0x02	; 2
 10e:	88 b9       	out	0x08, r24	; 8
 110:	8a b1       	in	r24, 0x0a	; 10
 112:	8f 70       	andi	r24, 0x0F	; 15
 114:	8a b9       	out	0x0a, r24	; 10
 116:	88 b1       	in	r24, 0x08	; 8
 118:	84 60       	ori	r24, 0x04	; 4
 11a:	88 b9       	out	0x08, r24	; 8
 11c:	00 c0       	rjmp	.+0      	; 0x11e <lcd_read+0x26>
 11e:	29 b1       	in	r18, 0x09	; 9
 120:	88 b1       	in	r24, 0x08	; 8
 122:	8b 7f       	andi	r24, 0xFB	; 251
 124:	88 b9       	out	0x08, r24	; 8
 126:	00 c0       	rjmp	.+0      	; 0x128 <lcd_read+0x30>
 128:	88 b1       	in	r24, 0x08	; 8
 12a:	84 60       	ori	r24, 0x04	; 4
 12c:	88 b9       	out	0x08, r24	; 8
 12e:	00 c0       	rjmp	.+0      	; 0x130 <lcd_read+0x38>
 130:	99 b1       	in	r25, 0x09	; 9
 132:	88 b1       	in	r24, 0x08	; 8
 134:	8b 7f       	andi	r24, 0xFB	; 251
 136:	88 b9       	out	0x08, r24	; 8
 138:	20 7f       	andi	r18, 0xF0	; 240
 13a:	89 2f       	mov	r24, r25
 13c:	82 95       	swap	r24
 13e:	8f 70       	andi	r24, 0x0F	; 15
 140:	82 2b       	or	r24, r18
 142:	08 95       	ret

00000144 <lcd_waitbusy>:
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_read>
 14a:	88 23       	and	r24, r24
 14c:	dc f3       	brlt	.-10     	; 0x144 <lcd_waitbusy>
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_read>
 154:	08 95       	ret

00000156 <lcd_command>:
 156:	cf 93       	push	r28
 158:	c8 2f       	mov	r28, r24
 15a:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_waitbusy>
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	8c 2f       	mov	r24, r28
 162:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write>
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <lcd_newline>:
 16a:	80 34       	cpi	r24, 0x40	; 64
 16c:	10 f4       	brcc	.+4      	; 0x172 <lcd_newline+0x8>
 16e:	80 e4       	ldi	r24, 0x40	; 64
 170:	01 c0       	rjmp	.+2      	; 0x174 <lcd_newline+0xa>
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	80 58       	subi	r24, 0x80	; 128
 176:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_command>
 17a:	08 95       	ret

0000017c <lcd_clrscr>:
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_command>
 182:	08 95       	ret

00000184 <lcd_putc>:
 184:	cf 93       	push	r28
 186:	c8 2f       	mov	r28, r24
 188:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_waitbusy>
 18c:	ca 30       	cpi	r28, 0x0A	; 10
 18e:	19 f4       	brne	.+6      	; 0x196 <lcd_putc+0x12>
 190:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_newline>
 194:	04 c0       	rjmp	.+8      	; 0x19e <lcd_putc+0x1a>
 196:	61 e0       	ldi	r22, 0x01	; 1
 198:	8c 2f       	mov	r24, r28
 19a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write>
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <lcd_puts>:
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	fc 01       	movw	r30, r24
 1a8:	03 c0       	rjmp	.+6      	; 0x1b0 <lcd_puts+0xe>
 1aa:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_putc>
 1ae:	fe 01       	movw	r30, r28
 1b0:	ef 01       	movw	r28, r30
 1b2:	21 96       	adiw	r28, 0x01	; 1
 1b4:	80 81       	ld	r24, Z
 1b6:	81 11       	cpse	r24, r1
 1b8:	f8 cf       	rjmp	.-16     	; 0x1aa <lcd_puts+0x8>
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	08 95       	ret

000001c0 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1c0:	cf 93       	push	r28
 1c2:	c8 2f       	mov	r28, r24
#if LCD_IO_MODE
    /*
     *  Initialize LCD to 4 bit I/O mode
     */

    DDR(LCD_DATA_PORT) |= 0xF0;
 1c4:	8a b1       	in	r24, 0x0a	; 10
 1c6:	80 6f       	ori	r24, 0xF0	; 240
 1c8:	8a b9       	out	0x0a, r24	; 10
    DDR(LCD_RS_PORT) |= _BV(LCD_RS_PIN);
 1ca:	87 b1       	in	r24, 0x07	; 7
 1cc:	81 60       	ori	r24, 0x01	; 1
 1ce:	87 b9       	out	0x07, r24	; 7
    lcd_rs_low();
 1d0:	88 b1       	in	r24, 0x08	; 8
 1d2:	8e 7f       	andi	r24, 0xFE	; 254
 1d4:	88 b9       	out	0x08, r24	; 8
    DDR(LCD_RW_PORT) |= _BV(LCD_RW_PIN);
 1d6:	87 b1       	in	r24, 0x07	; 7
 1d8:	82 60       	ori	r24, 0x02	; 2
 1da:	87 b9       	out	0x07, r24	; 7
    lcd_rw_low();
 1dc:	88 b1       	in	r24, 0x08	; 8
 1de:	8d 7f       	andi	r24, 0xFD	; 253
 1e0:	88 b9       	out	0x08, r24	; 8
    DDR(LCD_E_PORT) |= _BV(LCD_E_PIN);
 1e2:	87 b1       	in	r24, 0x07	; 7
 1e4:	84 60       	ori	r24, 0x04	; 4
 1e6:	87 b9       	out	0x07, r24	; 7
    lcd_e_low();
 1e8:	88 b1       	in	r24, 0x08	; 8
 1ea:	8b 7f       	andi	r24, 0xFB	; 251
 1ec:	88 b9       	out	0x08, r24	; 8
    delay(16000);                           /* wait 16ms after power-on     */

    /* initial write to lcd is 8bit */
    set_data(LCD_FUNCTION_8BIT_1LINE);
 1ee:	8b b1       	in	r24, 0x0b	; 11
 1f0:	8f 70       	andi	r24, 0x0F	; 15
 1f2:	80 63       	ori	r24, 0x30	; 48
 1f4:	8b b9       	out	0x0b, r24	; 11

    lcd_e_toggle();
 1f6:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
    delay(4992);         /* delay, busy flag can't be checked here */

    set_data(LCD_FUNCTION_8BIT_1LINE);
 1fa:	8b b1       	in	r24, 0x0b	; 11
 1fc:	8f 70       	andi	r24, 0x0F	; 15
 1fe:	80 63       	ori	r24, 0x30	; 48
 200:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 202:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
    delay(64);           /* delay, busy flag can't be checked here */

    set_data(LCD_FUNCTION_8BIT_1LINE);
 206:	8b b1       	in	r24, 0x0b	; 11
 208:	8f 70       	andi	r24, 0x0F	; 15
 20a:	80 63       	ori	r24, 0x30	; 48
 20c:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 20e:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
    delay(64);           /* delay, busy flag can't be checked here */

    set_data(LCD_FUNCTION_4BIT_1LINE); /* set IO mode to 4bit */
 212:	8b b1       	in	r24, 0x0b	; 11
 214:	8f 70       	andi	r24, 0x0F	; 15
 216:	80 62       	ori	r24, 0x20	; 32
 218:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 21a:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
    lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */
    delay(64);                              /* wait 64us                    */
    lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */
    delay(64);                              /* wait 64us                    */
#endif
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 21e:	88 e2       	ldi	r24, 0x28	; 40
 220:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_command>
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 224:	88 e0       	ldi	r24, 0x08	; 8
 226:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_command>
    lcd_clrscr();                           /* display clear                */
 22a:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 22e:	86 e0       	ldi	r24, 0x06	; 6
 230:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 234:	8c 2f       	mov	r24, r28
 236:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_command>

}/* lcd_init */
 23a:	cf 91       	pop	r28
 23c:	08 95       	ret

0000023e <main>:

#include "spi.h"
#include "mfrc522.h"

int main(void)
{
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	cd b7       	in	r28, 0x3d	; 61
 244:	de b7       	in	r29, 0x3e	; 62
 246:	e5 97       	sbiw	r28, 0x35	; 53
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	f8 94       	cli
 24c:	de bf       	out	0x3e, r29	; 62
 24e:	0f be       	out	0x3f, r0	; 63
 250:	cd bf       	out	0x3d, r28	; 61
	lcd_init(LCD_DISP_ON);
 252:	8c e0       	ldi	r24, 0x0C	; 12
 254:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_init>
	
	lcd_puts("starting...");
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 260:	2f ef       	ldi	r18, 0xFF	; 255
 262:	80 e7       	ldi	r24, 0x70	; 112
 264:	92 e0       	ldi	r25, 0x02	; 2
 266:	21 50       	subi	r18, 0x01	; 1
 268:	80 40       	sbci	r24, 0x00	; 0
 26a:	90 40       	sbci	r25, 0x00	; 0
 26c:	e1 f7       	brne	.-8      	; 0x266 <main+0x28>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <main+0x32>
 270:	00 00       	nop
	_delay_ms(50);
	
	spi_init();
 272:	0e 94 6d 03 	call	0x6da	; 0x6da <spi_init>
 276:	2f ef       	ldi	r18, 0xFF	; 255
 278:	89 e6       	ldi	r24, 0x69	; 105
 27a:	98 e1       	ldi	r25, 0x18	; 24
 27c:	21 50       	subi	r18, 0x01	; 1
 27e:	80 40       	sbci	r24, 0x00	; 0
 280:	90 40       	sbci	r25, 0x00	; 0
 282:	e1 f7       	brne	.-8      	; 0x27c <main+0x3e>
 284:	00 c0       	rjmp	.+0      	; 0x286 <main+0x48>
 286:	00 00       	nop
	_delay_ms(500);
	mfrc522_init();
 288:	0e 94 d7 01 	call	0x3ae	; 0x3ae <mfrc522_init>

	lcd_clrscr();
 28c:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_clrscr>
	lcd_puts("ready ...");
 290:	8c e0       	ldi	r24, 0x0C	; 12
 292:	91 e0       	ldi	r25, 0x01	; 1
 294:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_puts>
		uint8_t card_str[MAX_LEN];
		uint8_t card_serial[5]; // Serial number is 5 bytes
		

		// Check for card presence
		status = mfrc522_request(PICC_REQIDL, card_str);	
 298:	be 01       	movw	r22, r28
 29a:	6f 5d       	subi	r22, 0xDF	; 223
 29c:	7f 4f       	sbci	r23, 0xFF	; 255
 29e:	86 e2       	ldi	r24, 0x26	; 38
 2a0:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <mfrc522_request>
 2a4:	f8 2e       	mov	r15, r24
		char buffer[16];
		sprintf(buffer, "%u", status);
 2a6:	1f 92       	push	r1
 2a8:	8f 93       	push	r24
 2aa:	86 e1       	ldi	r24, 0x16	; 22
 2ac:	91 e0       	ldi	r25, 0x01	; 1
 2ae:	9f 93       	push	r25
 2b0:	8f 93       	push	r24
 2b2:	8e 01       	movw	r16, r28
 2b4:	0f 5e       	subi	r16, 0xEF	; 239
 2b6:	1f 4f       	sbci	r17, 0xFF	; 255
 2b8:	1f 93       	push	r17
 2ba:	0f 93       	push	r16
 2bc:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <sprintf>
		lcd_puts(buffer);
 2c0:	c8 01       	movw	r24, r16
 2c2:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_puts>
		if (status == CARD_FOUND) {
 2c6:	0f 90       	pop	r0
 2c8:	0f 90       	pop	r0
 2ca:	0f 90       	pop	r0
 2cc:	0f 90       	pop	r0
 2ce:	0f 90       	pop	r0
 2d0:	0f 90       	pop	r0
 2d2:	21 e0       	ldi	r18, 0x01	; 1
 2d4:	f2 12       	cpse	r15, r18
 2d6:	38 c0       	rjmp	.+112    	; 0x348 <main+0x10a>

			lcd_clrscr();
 2d8:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_clrscr>
			lcd_puts("found card ...");
 2dc:	89 e1       	ldi	r24, 0x19	; 25
 2de:	91 e0       	ldi	r25, 0x01	; 1
 2e0:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_puts>
 2e4:	8f ef       	ldi	r24, 0xFF	; 255
 2e6:	99 e6       	ldi	r25, 0x69	; 105
 2e8:	28 e1       	ldi	r18, 0x18	; 24
 2ea:	81 50       	subi	r24, 0x01	; 1
 2ec:	90 40       	sbci	r25, 0x00	; 0
 2ee:	20 40       	sbci	r18, 0x00	; 0
 2f0:	e1 f7       	brne	.-8      	; 0x2ea <main+0xac>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <main+0xb6>
 2f4:	00 00       	nop
			_delay_ms(500);

			// Get the card's serial number
			status = mfrc522_get_card_serial(card_serial);
 2f6:	ce 01       	movw	r24, r28
 2f8:	c1 96       	adiw	r24, 0x31	; 49
 2fa:	0e 94 31 03 	call	0x662	; 0x662 <mfrc522_get_card_serial>
			if (status == CARD_FOUND) {
 2fe:	81 30       	cpi	r24, 0x01	; 1
 300:	19 f5       	brne	.+70     	; 0x348 <main+0x10a>
				// If a card is found, display the serial number on the LCD
				char buffer[16];
				sprintf(buffer, "ID: %X%X%X%X%X", card_serial[0], card_serial[1], card_serial[2], card_serial[3], card_serial[4]);
 302:	4d a9       	ldd	r20, Y+53	; 0x35
 304:	3c a9       	ldd	r19, Y+52	; 0x34
 306:	2b a9       	ldd	r18, Y+51	; 0x33
 308:	9a a9       	ldd	r25, Y+50	; 0x32
 30a:	89 a9       	ldd	r24, Y+49	; 0x31
 30c:	1f 92       	push	r1
 30e:	4f 93       	push	r20
 310:	1f 92       	push	r1
 312:	3f 93       	push	r19
 314:	1f 92       	push	r1
 316:	2f 93       	push	r18
 318:	1f 92       	push	r1
 31a:	9f 93       	push	r25
 31c:	1f 92       	push	r1
 31e:	8f 93       	push	r24
 320:	88 e2       	ldi	r24, 0x28	; 40
 322:	91 e0       	ldi	r25, 0x01	; 1
 324:	9f 93       	push	r25
 326:	8f 93       	push	r24
 328:	00 51       	subi	r16, 0x10	; 16
 32a:	11 09       	sbc	r17, r1
 32c:	1f 93       	push	r17
 32e:	0f 93       	push	r16
 330:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <sprintf>
				lcd_clrscr();
 334:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_clrscr>
				lcd_puts(buffer);
 338:	c8 01       	movw	r24, r16
 33a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_puts>
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	f8 94       	cli
 342:	de bf       	out	0x3e, r29	; 62
 344:	0f be       	out	0x3f, r0	; 63
 346:	cd bf       	out	0x3d, r28	; 61
 348:	9f ef       	ldi	r25, 0xFF	; 255
 34a:	29 e6       	ldi	r18, 0x69	; 105
 34c:	88 e1       	ldi	r24, 0x18	; 24
 34e:	91 50       	subi	r25, 0x01	; 1
 350:	20 40       	sbci	r18, 0x00	; 0
 352:	80 40       	sbci	r24, 0x00	; 0
 354:	e1 f7       	brne	.-8      	; 0x34e <main+0x110>
 356:	00 c0       	rjmp	.+0      	; 0x358 <main+0x11a>
 358:	00 00       	nop
			}
		}
		_delay_ms(500);
	}
 35a:	9e cf       	rjmp	.-196    	; 0x298 <main+0x5a>

0000035c <mfrc522_write>:
		mfrc522_write(TxControlReg,byte|0x03);
	}
}

void mfrc522_write(uint8_t reg, uint8_t data)
{
 35c:	cf 93       	push	r28
 35e:	c6 2f       	mov	r28, r22
	ENABLE_CHIP();
 360:	95 b1       	in	r25, 0x05	; 5
 362:	9b 7f       	andi	r25, 0xFB	; 251
 364:	95 b9       	out	0x05, r25	; 5
	spi_transmit((reg<<1)&0x7E);
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	88 0f       	add	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	8e 77       	andi	r24, 0x7E	; 126
 36e:	0e 94 74 03 	call	0x6e8	; 0x6e8 <spi_transmit>
	spi_transmit(data);
 372:	8c 2f       	mov	r24, r28
 374:	0e 94 74 03 	call	0x6e8	; 0x6e8 <spi_transmit>
	DISABLE_CHIP();
 378:	85 b1       	in	r24, 0x05	; 5
 37a:	84 60       	ori	r24, 0x04	; 4
 37c:	85 b9       	out	0x05, r24	; 5
}
 37e:	cf 91       	pop	r28
 380:	08 95       	ret

00000382 <mfrc522_read>:

uint8_t mfrc522_read(uint8_t reg)
{
	uint8_t data;	
	ENABLE_CHIP();
 382:	95 b1       	in	r25, 0x05	; 5
 384:	9b 7f       	andi	r25, 0xFB	; 251
 386:	95 b9       	out	0x05, r25	; 5
	spi_transmit(((reg<<1)&0x7E)|0x80);
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	8e 77       	andi	r24, 0x7E	; 126
 390:	80 68       	ori	r24, 0x80	; 128
 392:	0e 94 74 03 	call	0x6e8	; 0x6e8 <spi_transmit>
	data = spi_transmit(0x00);
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	0e 94 74 03 	call	0x6e8	; 0x6e8 <spi_transmit>
	DISABLE_CHIP();
 39c:	95 b1       	in	r25, 0x05	; 5
 39e:	94 60       	ori	r25, 0x04	; 4
 3a0:	95 b9       	out	0x05, r25	; 5
	return data;
}
 3a2:	08 95       	ret

000003a4 <mfrc522_reset>:

void mfrc522_reset()
{
	mfrc522_write(CommandReg,SoftReset_CMD);
 3a4:	6f e0       	ldi	r22, 0x0F	; 15
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	0e 94 ae 01 	call	0x35c	; 0x35c <mfrc522_write>
 3ac:	08 95       	ret

000003ae <mfrc522_init>:
#endif

void mfrc522_init()
{
	uint8_t byte;
	mfrc522_reset();
 3ae:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <mfrc522_reset>
	
	mfrc522_write(TModeReg, 0x8D);
 3b2:	6d e8       	ldi	r22, 0x8D	; 141
 3b4:	8a e2       	ldi	r24, 0x2A	; 42
 3b6:	0e 94 ae 01 	call	0x35c	; 0x35c <mfrc522_write>
    mfrc522_write(TPrescalerReg, 0x3E);
 3ba:	6e e3       	ldi	r22, 0x3E	; 62
 3bc:	8b e2       	ldi	r24, 0x2B	; 43
 3be:	0e 94 ae 01 	call	0x35c	; 0x35c <mfrc522_write>
    mfrc522_write(TReloadReg_1, 30);   
 3c2:	6e e1       	ldi	r22, 0x1E	; 30
 3c4:	8c e2       	ldi	r24, 0x2C	; 44
 3c6:	0e 94 ae 01 	call	0x35c	; 0x35c <mfrc522_write>
    mfrc522_write(TReloadReg_2, 0);	
 3ca:	60 e0       	ldi	r22, 0x00	; 0
 3cc:	8d e2       	ldi	r24, 0x2D	; 45
 3ce:	0e 94 ae 01 	call	0x35c	; 0x35c <mfrc522_write>
	mfrc522_write(TxASKReg, 0x40);	
 3d2:	60 e4       	ldi	r22, 0x40	; 64
 3d4:	85 e1       	ldi	r24, 0x15	; 21
 3d6:	0e 94 ae 01 	call	0x35c	; 0x35c <mfrc522_write>
	mfrc522_write(ModeReg, 0x3D);
 3da:	6d e3       	ldi	r22, 0x3D	; 61
 3dc:	81 e1       	ldi	r24, 0x11	; 17
 3de:	0e 94 ae 01 	call	0x35c	; 0x35c <mfrc522_write>
	
	byte = mfrc522_read(TxControlReg);
 3e2:	84 e1       	ldi	r24, 0x14	; 20
 3e4:	0e 94 c1 01 	call	0x382	; 0x382 <mfrc522_read>
	if(!(byte&0x03))
 3e8:	98 2f       	mov	r25, r24
 3ea:	93 70       	andi	r25, 0x03	; 3
 3ec:	29 f4       	brne	.+10     	; 0x3f8 <mfrc522_init+0x4a>
	{
		mfrc522_write(TxControlReg,byte|0x03);
 3ee:	68 2f       	mov	r22, r24
 3f0:	63 60       	ori	r22, 0x03	; 3
 3f2:	84 e1       	ldi	r24, 0x14	; 20
 3f4:	0e 94 ae 01 	call	0x35c	; 0x35c <mfrc522_write>
 3f8:	08 95       	ret

000003fa <mfrc522_to_card>:
   
	return status;
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
 3fa:	4f 92       	push	r4
 3fc:	5f 92       	push	r5
 3fe:	6f 92       	push	r6
 400:	7f 92       	push	r7
 402:	8f 92       	push	r8
 404:	9f 92       	push	r9
 406:	af 92       	push	r10
 408:	bf 92       	push	r11
 40a:	cf 92       	push	r12
 40c:	df 92       	push	r13
 40e:	ef 92       	push	r14
 410:	ff 92       	push	r15
 412:	0f 93       	push	r16
 414:	1f 93       	push	r17
 416:	cf 93       	push	r28
 418:	df 93       	push	r29
 41a:	d8 2f       	mov	r29, r24
 41c:	7b 01       	movw	r14, r22
 41e:	c4 2f       	mov	r28, r20
 420:	59 01       	movw	r10, r18
    uint8_t lastBits;
    uint8_t n;
    uint8_t	tmp;
    uint32_t i;

    switch (cmd)
 422:	8c 30       	cpi	r24, 0x0C	; 12
 424:	29 f0       	breq	.+10     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 426:	8e 30       	cpi	r24, 0x0E	; 14
 428:	61 f0       	breq	.+24     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
    uint8_t irqEn = 0x00;
    uint8_t waitIRq = 0x00;
 42a:	91 2c       	mov	r9, r1
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
    uint8_t irqEn = 0x00;
 42c:	81 2c       	mov	r8, r1
 42e:	10 c0       	rjmp	.+32     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
			waitIRq = 0x30;
 430:	0f 2e       	mov	r0, r31
 432:	f0 e3       	ldi	r31, 0x30	; 48
 434:	9f 2e       	mov	r9, r31
 436:	f0 2d       	mov	r31, r0
			waitIRq = 0x10;
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
 438:	0f 2e       	mov	r0, r31
 43a:	f7 e7       	ldi	r31, 0x77	; 119
 43c:	8f 2e       	mov	r8, r31
 43e:	f0 2d       	mov	r31, r0
			waitIRq = 0x30;
			break;
 440:	07 c0       	rjmp	.+14     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
    switch (cmd)
    {
        case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
			waitIRq = 0x10;
 442:	68 94       	set
 444:	99 24       	eor	r9, r9
 446:	94 f8       	bld	r9, 4

    switch (cmd)
    {
        case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
 448:	0f 2e       	mov	r0, r31
 44a:	f2 e1       	ldi	r31, 0x12	; 18
 44c:	8f 2e       	mov	r8, r31
 44e:	f0 2d       	mov	r31, r0
		default:
			break;
    }
   
    //mfrc522_write(ComIEnReg, irqEn|0x80);	//Interrupt request
    n=mfrc522_read(ComIrqReg);
 450:	84 e0       	ldi	r24, 0x04	; 4
 452:	0e 94 c1 01 	call	0x382	; 0x382 <mfrc522_read>
    mfrc522_write(ComIrqReg,n&(~0x80));//clear all interrupt bits
 456:	68 2f       	mov	r22, r24
 458:	6f 77       	andi	r22, 0x7F	; 127
 45a:	84 e0       	ldi	r24, 0x04	; 4
 45c:	0e 94 ae 01 	call	0x35c	; 0x35c <mfrc522_write>
    n=mfrc522_read(FIFOLevelReg);
 460:	8a e0       	ldi	r24, 0x0A	; 10
 462:	0e 94 c1 01 	call	0x382	; 0x382 <mfrc522_read>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
 466:	68 2f       	mov	r22, r24
 468:	60 68       	ori	r22, 0x80	; 128
 46a:	8a e0       	ldi	r24, 0x0A	; 10
 46c:	0e 94 ae 01 	call	0x35c	; 0x35c <mfrc522_write>
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???
 470:	60 e0       	ldi	r22, 0x00	; 0
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	0e 94 ae 01 	call	0x35c	; 0x35c <mfrc522_write>

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 478:	41 2c       	mov	r4, r1
 47a:	51 2c       	mov	r5, r1
 47c:	32 01       	movw	r6, r4
 47e:	0c c0       	rjmp	.+24     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
 480:	f7 01       	movw	r30, r14
 482:	e4 0d       	add	r30, r4
 484:	f5 1d       	adc	r31, r5
 486:	60 81       	ld	r22, Z
 488:	89 e0       	ldi	r24, 0x09	; 9
 48a:	0e 94 ae 01 	call	0x35c	; 0x35c <mfrc522_write>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 48e:	8f ef       	ldi	r24, 0xFF	; 255
 490:	48 1a       	sub	r4, r24
 492:	58 0a       	sbc	r5, r24
 494:	68 0a       	sbc	r6, r24
 496:	78 0a       	sbc	r7, r24
 498:	8c 2f       	mov	r24, r28
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	a0 e0       	ldi	r26, 0x00	; 0
 49e:	b0 e0       	ldi	r27, 0x00	; 0
 4a0:	48 16       	cp	r4, r24
 4a2:	59 06       	cpc	r5, r25
 4a4:	6a 06       	cpc	r6, r26
 4a6:	7b 06       	cpc	r7, r27
 4a8:	58 f3       	brcs	.-42     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
	}

	//Execute the cmd
	mfrc522_write(CommandReg, cmd);
 4aa:	6d 2f       	mov	r22, r29
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	0e 94 ae 01 	call	0x35c	; 0x35c <mfrc522_write>
    if (cmd == Transceive_CMD)
 4b2:	dc 30       	cpi	r29, 0x0C	; 12
 4b4:	41 f4       	brne	.+16     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
    {    
		n=mfrc522_read(BitFramingReg);
 4b6:	8d e0       	ldi	r24, 0x0D	; 13
 4b8:	0e 94 c1 01 	call	0x382	; 0x382 <mfrc522_read>
		mfrc522_write(BitFramingReg,n|0x80);  
 4bc:	68 2f       	mov	r22, r24
 4be:	60 68       	ori	r22, 0x80	; 128
 4c0:	8d e0       	ldi	r24, 0x0D	; 13
 4c2:	0e 94 ae 01 	call	0x35c	; 0x35c <mfrc522_write>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
 4c6:	0f 2e       	mov	r0, r31
 4c8:	f0 ed       	ldi	r31, 0xD0	; 208
 4ca:	cf 2e       	mov	r12, r31
 4cc:	f7 e0       	ldi	r31, 0x07	; 7
 4ce:	df 2e       	mov	r13, r31
 4d0:	e1 2c       	mov	r14, r1
 4d2:	f1 2c       	mov	r15, r1
 4d4:	f0 2d       	mov	r31, r0
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = mfrc522_read(ComIrqReg);
 4d6:	84 e0       	ldi	r24, 0x04	; 4
 4d8:	0e 94 c1 01 	call	0x382	; 0x382 <mfrc522_read>
 4dc:	c8 2f       	mov	r28, r24
        i--;
 4de:	e1 e0       	ldi	r30, 0x01	; 1
 4e0:	ce 1a       	sub	r12, r30
 4e2:	d1 08       	sbc	r13, r1
 4e4:	e1 08       	sbc	r14, r1
 4e6:	f1 08       	sbc	r15, r1
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 4e8:	29 f0       	breq	.+10     	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
 4ea:	80 fd       	sbrc	r24, 0
 4ec:	03 c0       	rjmp	.+6      	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
 4ee:	89 2d       	mov	r24, r9
 4f0:	8c 23       	and	r24, r28
 4f2:	89 f3       	breq	.-30     	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>

	tmp=mfrc522_read(BitFramingReg);
 4f4:	8d e0       	ldi	r24, 0x0D	; 13
 4f6:	0e 94 c1 01 	call	0x382	; 0x382 <mfrc522_read>
	mfrc522_write(BitFramingReg,tmp&(~0x80));
 4fa:	68 2f       	mov	r22, r24
 4fc:	6f 77       	andi	r22, 0x7F	; 127
 4fe:	8d e0       	ldi	r24, 0x0D	; 13
 500:	0e 94 ae 01 	call	0x35c	; 0x35c <mfrc522_write>
	
    if (i != 0)
 504:	cd 28       	or	r12, r13
 506:	ce 28       	or	r12, r14
 508:	cf 28       	or	r12, r15
 50a:	09 f4       	brne	.+2      	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
 50c:	60 c0       	rjmp	.+192    	; 0x5ce <__EEPROM_REGION_LENGTH__+0x1ce>
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 50e:	86 e0       	ldi	r24, 0x06	; 6
 510:	0e 94 c1 01 	call	0x382	; 0x382 <mfrc522_read>
 514:	8b 71       	andi	r24, 0x1B	; 27
 516:	09 f0       	breq	.+2      	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
 518:	5c c0       	rjmp	.+184    	; 0x5d2 <__EEPROM_REGION_LENGTH__+0x1d2>
        {
            status = CARD_FOUND;
            if (n & irqEn & 0x01)
 51a:	c8 21       	and	r28, r8
 51c:	c0 fd       	sbrc	r28, 0
 51e:	02 c0       	rjmp	.+4      	; 0x524 <__EEPROM_REGION_LENGTH__+0x124>
	
    if (i != 0)
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
        {
            status = CARD_FOUND;
 520:	c1 e0       	ldi	r28, 0x01	; 1
 522:	01 c0       	rjmp	.+2      	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
            if (n & irqEn & 0x01)
            {   
				status = CARD_NOT_FOUND;			//??   
 524:	c2 e0       	ldi	r28, 0x02	; 2
			}

            if (cmd == Transceive_CMD)
 526:	dc 30       	cpi	r29, 0x0C	; 12
 528:	09 f0       	breq	.+2      	; 0x52c <__EEPROM_REGION_LENGTH__+0x12c>
 52a:	54 c0       	rjmp	.+168    	; 0x5d4 <__EEPROM_REGION_LENGTH__+0x1d4>
            {
               	n = mfrc522_read(FIFOLevelReg);
 52c:	8a e0       	ldi	r24, 0x0A	; 10
 52e:	0e 94 c1 01 	call	0x382	; 0x382 <mfrc522_read>
 532:	d8 2f       	mov	r29, r24
              	lastBits = mfrc522_read(ControlReg) & 0x07;
 534:	8c e0       	ldi	r24, 0x0C	; 12
 536:	0e 94 c1 01 	call	0x382	; 0x382 <mfrc522_read>
 53a:	28 2f       	mov	r18, r24
 53c:	27 70       	andi	r18, 0x07	; 7
                if (lastBits)
 53e:	a9 f0       	breq	.+42     	; 0x56a <__EEPROM_REGION_LENGTH__+0x16a>
                {   
					*back_data_len = (n-1)*8 + lastBits;   
 540:	8d 2f       	mov	r24, r29
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	01 97       	sbiw	r24, 0x01	; 1
 546:	88 0f       	add	r24, r24
 548:	99 1f       	adc	r25, r25
 54a:	88 0f       	add	r24, r24
 54c:	99 1f       	adc	r25, r25
 54e:	88 0f       	add	r24, r24
 550:	99 1f       	adc	r25, r25
 552:	82 0f       	add	r24, r18
 554:	91 1d       	adc	r25, r1
 556:	09 2e       	mov	r0, r25
 558:	00 0c       	add	r0, r0
 55a:	aa 0b       	sbc	r26, r26
 55c:	bb 0b       	sbc	r27, r27
 55e:	f8 01       	movw	r30, r16
 560:	80 83       	st	Z, r24
 562:	91 83       	std	Z+1, r25	; 0x01
 564:	a2 83       	std	Z+2, r26	; 0x02
 566:	b3 83       	std	Z+3, r27	; 0x03
 568:	11 c0       	rjmp	.+34     	; 0x58c <__EEPROM_REGION_LENGTH__+0x18c>
				}
                else
                {   
					*back_data_len = n*8;   
 56a:	8d 2f       	mov	r24, r29
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	88 0f       	add	r24, r24
 570:	99 1f       	adc	r25, r25
 572:	88 0f       	add	r24, r24
 574:	99 1f       	adc	r25, r25
 576:	88 0f       	add	r24, r24
 578:	99 1f       	adc	r25, r25
 57a:	09 2e       	mov	r0, r25
 57c:	00 0c       	add	r0, r0
 57e:	aa 0b       	sbc	r26, r26
 580:	bb 0b       	sbc	r27, r27
 582:	f8 01       	movw	r30, r16
 584:	80 83       	st	Z, r24
 586:	91 83       	std	Z+1, r25	; 0x01
 588:	a2 83       	std	Z+2, r26	; 0x02
 58a:	b3 83       	std	Z+3, r27	; 0x03
				}

                if (n == 0)
 58c:	d1 11       	cpse	r29, r1
 58e:	01 c0       	rjmp	.+2      	; 0x592 <__EEPROM_REGION_LENGTH__+0x192>
                {   
					n = 1;    
 590:	d1 e0       	ldi	r29, 0x01	; 1
				}
                if (n > MAX_LEN)
 592:	d1 31       	cpi	r29, 0x11	; 17
 594:	08 f0       	brcs	.+2      	; 0x598 <__EEPROM_REGION_LENGTH__+0x198>
                {   
					n = MAX_LEN;   
 596:	d0 e1       	ldi	r29, 0x10	; 16
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
 598:	c1 2c       	mov	r12, r1
 59a:	d1 2c       	mov	r13, r1
 59c:	76 01       	movw	r14, r12
 59e:	0d c0       	rjmp	.+26     	; 0x5ba <__EEPROM_REGION_LENGTH__+0x1ba>
                {   
					back_data[i] = mfrc522_read(FIFODataReg);    
 5a0:	85 01       	movw	r16, r10
 5a2:	0c 0d       	add	r16, r12
 5a4:	1d 1d       	adc	r17, r13
 5a6:	89 e0       	ldi	r24, 0x09	; 9
 5a8:	0e 94 c1 01 	call	0x382	; 0x382 <mfrc522_read>
 5ac:	f8 01       	movw	r30, r16
 5ae:	80 83       	st	Z, r24
                {   
					n = MAX_LEN;   
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
 5b0:	ff ef       	ldi	r31, 0xFF	; 255
 5b2:	cf 1a       	sub	r12, r31
 5b4:	df 0a       	sbc	r13, r31
 5b6:	ef 0a       	sbc	r14, r31
 5b8:	ff 0a       	sbc	r15, r31
 5ba:	8d 2f       	mov	r24, r29
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	a0 e0       	ldi	r26, 0x00	; 0
 5c0:	b0 e0       	ldi	r27, 0x00	; 0
 5c2:	c8 16       	cp	r12, r24
 5c4:	d9 06       	cpc	r13, r25
 5c6:	ea 06       	cpc	r14, r26
 5c8:	fb 06       	cpc	r15, r27
 5ca:	50 f3       	brcs	.-44     	; 0x5a0 <__EEPROM_REGION_LENGTH__+0x1a0>
 5cc:	03 c0       	rjmp	.+6      	; 0x5d4 <__EEPROM_REGION_LENGTH__+0x1d4>
	return status;
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
 5ce:	c3 e0       	ldi	r28, 0x03	; 3
 5d0:	01 c0       	rjmp	.+2      	; 0x5d4 <__EEPROM_REGION_LENGTH__+0x1d4>
				}
            }
        }
        else
        {   
			status = ERROR;  
 5d2:	c3 e0       	ldi	r28, 0x03	; 3
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //mfrc522_write(cmdReg, PCD_IDLE); 

    return status;
}
 5d4:	8c 2f       	mov	r24, r28
 5d6:	df 91       	pop	r29
 5d8:	cf 91       	pop	r28
 5da:	1f 91       	pop	r17
 5dc:	0f 91       	pop	r16
 5de:	ff 90       	pop	r15
 5e0:	ef 90       	pop	r14
 5e2:	df 90       	pop	r13
 5e4:	cf 90       	pop	r12
 5e6:	bf 90       	pop	r11
 5e8:	af 90       	pop	r10
 5ea:	9f 90       	pop	r9
 5ec:	8f 90       	pop	r8
 5ee:	7f 90       	pop	r7
 5f0:	6f 90       	pop	r6
 5f2:	5f 90       	pop	r5
 5f4:	4f 90       	pop	r4
 5f6:	08 95       	ret

000005f8 <mfrc522_request>:
{
	mfrc522_write(CommandReg,SoftReset_CMD);
}

uint8_t	mfrc522_request(uint8_t req_mode, uint8_t * tag_type)
{
 5f8:	ef 92       	push	r14
 5fa:	ff 92       	push	r15
 5fc:	0f 93       	push	r16
 5fe:	1f 93       	push	r17
 600:	cf 93       	push	r28
 602:	df 93       	push	r29
 604:	00 d0       	rcall	.+0      	; 0x606 <mfrc522_request+0xe>
 606:	00 d0       	rcall	.+0      	; 0x608 <mfrc522_request+0x10>
 608:	cd b7       	in	r28, 0x3d	; 61
 60a:	de b7       	in	r29, 0x3e	; 62
 60c:	18 2f       	mov	r17, r24
 60e:	7b 01       	movw	r14, r22
	uint8_t  status;  
	uint32_t backBits;//The received data bits

	mfrc522_write(BitFramingReg, 0x07);//TxLastBists = BitFramingReg[2..0]	???
 610:	67 e0       	ldi	r22, 0x07	; 7
 612:	8d e0       	ldi	r24, 0x0D	; 13
 614:	0e 94 ae 01 	call	0x35c	; 0x35c <mfrc522_write>
	
	tag_type[0] = req_mode;
 618:	f7 01       	movw	r30, r14
 61a:	10 83       	st	Z, r17
	status = mfrc522_to_card(Transceive_CMD, tag_type, 1, tag_type, &backBits);
 61c:	8e 01       	movw	r16, r28
 61e:	0f 5f       	subi	r16, 0xFF	; 255
 620:	1f 4f       	sbci	r17, 0xFF	; 255
 622:	97 01       	movw	r18, r14
 624:	41 e0       	ldi	r20, 0x01	; 1
 626:	b7 01       	movw	r22, r14
 628:	8c e0       	ldi	r24, 0x0C	; 12
 62a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <mfrc522_to_card>

	if ((status != CARD_FOUND) || (backBits != 0x10))
 62e:	81 30       	cpi	r24, 0x01	; 1
 630:	51 f4       	brne	.+20     	; 0x646 <mfrc522_request+0x4e>
 632:	49 81       	ldd	r20, Y+1	; 0x01
 634:	5a 81       	ldd	r21, Y+2	; 0x02
 636:	6b 81       	ldd	r22, Y+3	; 0x03
 638:	7c 81       	ldd	r23, Y+4	; 0x04
 63a:	40 31       	cpi	r20, 0x10	; 16
 63c:	51 05       	cpc	r21, r1
 63e:	61 05       	cpc	r22, r1
 640:	71 05       	cpc	r23, r1
 642:	19 f4       	brne	.+6      	; 0x64a <mfrc522_request+0x52>
 644:	03 c0       	rjmp	.+6      	; 0x64c <mfrc522_request+0x54>
	{    
		status = ERROR;
 646:	83 e0       	ldi	r24, 0x03	; 3
 648:	01 c0       	rjmp	.+2      	; 0x64c <mfrc522_request+0x54>
 64a:	83 e0       	ldi	r24, 0x03	; 3
	}
   
	return status;
}
 64c:	0f 90       	pop	r0
 64e:	0f 90       	pop	r0
 650:	0f 90       	pop	r0
 652:	0f 90       	pop	r0
 654:	df 91       	pop	r29
 656:	cf 91       	pop	r28
 658:	1f 91       	pop	r17
 65a:	0f 91       	pop	r16
 65c:	ff 90       	pop	r15
 65e:	ef 90       	pop	r14
 660:	08 95       	ret

00000662 <mfrc522_get_card_serial>:
    return status;
}


uint8_t mfrc522_get_card_serial(uint8_t * serial_out)
{
 662:	ef 92       	push	r14
 664:	ff 92       	push	r15
 666:	0f 93       	push	r16
 668:	1f 93       	push	r17
 66a:	cf 93       	push	r28
 66c:	df 93       	push	r29
 66e:	00 d0       	rcall	.+0      	; 0x670 <mfrc522_get_card_serial+0xe>
 670:	00 d0       	rcall	.+0      	; 0x672 <mfrc522_get_card_serial+0x10>
 672:	cd b7       	in	r28, 0x3d	; 61
 674:	de b7       	in	r29, 0x3e	; 62
 676:	7c 01       	movw	r14, r24
	uint8_t status;
    uint8_t i;
	uint8_t serNumCheck=0;
    uint32_t unLen;
    
	mfrc522_write(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 678:	60 e0       	ldi	r22, 0x00	; 0
 67a:	8d e0       	ldi	r24, 0x0D	; 13
 67c:	0e 94 ae 01 	call	0x35c	; 0x35c <mfrc522_write>
 
    serial_out[0] = PICC_ANTICOLL;
 680:	83 e9       	ldi	r24, 0x93	; 147
 682:	f7 01       	movw	r30, r14
 684:	80 83       	st	Z, r24
    serial_out[1] = 0x20;
 686:	80 e2       	ldi	r24, 0x20	; 32
 688:	81 83       	std	Z+1, r24	; 0x01
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);
 68a:	8e 01       	movw	r16, r28
 68c:	0f 5f       	subi	r16, 0xFF	; 255
 68e:	1f 4f       	sbci	r17, 0xFF	; 255
 690:	97 01       	movw	r18, r14
 692:	42 e0       	ldi	r20, 0x02	; 2
 694:	b7 01       	movw	r22, r14
 696:	8c e0       	ldi	r24, 0x0C	; 12
 698:	0e 94 fd 01 	call	0x3fa	; 0x3fa <mfrc522_to_card>

    if (status == CARD_FOUND)
 69c:	81 30       	cpi	r24, 0x01	; 1
 69e:	91 f4       	brne	.+36     	; 0x6c4 <mfrc522_get_card_serial+0x62>
 6a0:	07 c0       	rjmp	.+14     	; 0x6b0 <mfrc522_get_card_serial+0x4e>
	{
		//Check card serial number
		for (i=0; i<4; i++)
		{   
		 	serNumCheck ^= serial_out[i];
 6a2:	f7 01       	movw	r30, r14
 6a4:	e9 0f       	add	r30, r25
 6a6:	f1 1d       	adc	r31, r1
 6a8:	30 81       	ld	r19, Z
 6aa:	23 27       	eor	r18, r19
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);

    if (status == CARD_FOUND)
	{
		//Check card serial number
		for (i=0; i<4; i++)
 6ac:	9f 5f       	subi	r25, 0xFF	; 255
 6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <mfrc522_get_card_serial+0x52>
 6b0:	20 e0       	ldi	r18, 0x00	; 0
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	94 30       	cpi	r25, 0x04	; 4
 6b6:	a8 f3       	brcs	.-22     	; 0x6a2 <mfrc522_get_card_serial+0x40>
		{   
		 	serNumCheck ^= serial_out[i];
		}
		if (serNumCheck != serial_out[i])
 6b8:	f7 01       	movw	r30, r14
 6ba:	e9 0f       	add	r30, r25
 6bc:	f1 1d       	adc	r31, r1
 6be:	90 81       	ld	r25, Z
 6c0:	29 13       	cpse	r18, r25
		{   
			status = ERROR;    
 6c2:	83 e0       	ldi	r24, 0x03	; 3
		}
    }
    return status;
 6c4:	0f 90       	pop	r0
 6c6:	0f 90       	pop	r0
 6c8:	0f 90       	pop	r0
 6ca:	0f 90       	pop	r0
 6cc:	df 91       	pop	r29
 6ce:	cf 91       	pop	r28
 6d0:	1f 91       	pop	r17
 6d2:	0f 91       	pop	r16
 6d4:	ff 90       	pop	r15
 6d6:	ef 90       	pop	r14
 6d8:	08 95       	ret

000006da <spi_init>:
#include "spi.h"

#if SPI_CONFIG_AS_MASTER
void spi_init()
{
	SPI_DDR |= (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS);
 6da:	84 b1       	in	r24, 0x04	; 4
 6dc:	8c 62       	ori	r24, 0x2C	; 44
 6de:	84 b9       	out	0x04, r24	; 4
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);//prescaler 16
 6e0:	8c b5       	in	r24, 0x2c	; 44
 6e2:	81 65       	ori	r24, 0x51	; 81
 6e4:	8c bd       	out	0x2c, r24	; 44
 6e6:	08 95       	ret

000006e8 <spi_transmit>:
}


uint8_t spi_transmit(uint8_t data)
{
	SPDR = data;
 6e8:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
 6ea:	0d b4       	in	r0, 0x2d	; 45
 6ec:	07 fe       	sbrs	r0, 7
 6ee:	fd cf       	rjmp	.-6      	; 0x6ea <spi_transmit+0x2>
	
	return SPDR;
 6f0:	8e b5       	in	r24, 0x2e	; 46
}
 6f2:	08 95       	ret

000006f4 <sprintf>:
 6f4:	ae e0       	ldi	r26, 0x0E	; 14
 6f6:	b0 e0       	ldi	r27, 0x00	; 0
 6f8:	e0 e8       	ldi	r30, 0x80	; 128
 6fa:	f3 e0       	ldi	r31, 0x03	; 3
 6fc:	0c 94 3b 06 	jmp	0xc76	; 0xc76 <__prologue_saves__+0x1c>
 700:	0d 89       	ldd	r16, Y+21	; 0x15
 702:	1e 89       	ldd	r17, Y+22	; 0x16
 704:	86 e0       	ldi	r24, 0x06	; 6
 706:	8c 83       	std	Y+4, r24	; 0x04
 708:	1a 83       	std	Y+2, r17	; 0x02
 70a:	09 83       	std	Y+1, r16	; 0x01
 70c:	8f ef       	ldi	r24, 0xFF	; 255
 70e:	9f e7       	ldi	r25, 0x7F	; 127
 710:	9e 83       	std	Y+6, r25	; 0x06
 712:	8d 83       	std	Y+5, r24	; 0x05
 714:	ae 01       	movw	r20, r28
 716:	47 5e       	subi	r20, 0xE7	; 231
 718:	5f 4f       	sbci	r21, 0xFF	; 255
 71a:	6f 89       	ldd	r22, Y+23	; 0x17
 71c:	78 8d       	ldd	r23, Y+24	; 0x18
 71e:	ce 01       	movw	r24, r28
 720:	01 96       	adiw	r24, 0x01	; 1
 722:	0e 94 9c 03 	call	0x738	; 0x738 <vfprintf>
 726:	ef 81       	ldd	r30, Y+7	; 0x07
 728:	f8 85       	ldd	r31, Y+8	; 0x08
 72a:	e0 0f       	add	r30, r16
 72c:	f1 1f       	adc	r31, r17
 72e:	10 82       	st	Z, r1
 730:	2e 96       	adiw	r28, 0x0e	; 14
 732:	e4 e0       	ldi	r30, 0x04	; 4
 734:	0c 94 57 06 	jmp	0xcae	; 0xcae <__epilogue_restores__+0x1c>

00000738 <vfprintf>:
 738:	ab e0       	ldi	r26, 0x0B	; 11
 73a:	b0 e0       	ldi	r27, 0x00	; 0
 73c:	e2 ea       	ldi	r30, 0xA2	; 162
 73e:	f3 e0       	ldi	r31, 0x03	; 3
 740:	0c 94 2d 06 	jmp	0xc5a	; 0xc5a <__prologue_saves__>
 744:	6c 01       	movw	r12, r24
 746:	7b 01       	movw	r14, r22
 748:	8a 01       	movw	r16, r20
 74a:	fc 01       	movw	r30, r24
 74c:	17 82       	std	Z+7, r1	; 0x07
 74e:	16 82       	std	Z+6, r1	; 0x06
 750:	83 81       	ldd	r24, Z+3	; 0x03
 752:	81 ff       	sbrs	r24, 1
 754:	cc c1       	rjmp	.+920    	; 0xaee <__stack+0x1ef>
 756:	ce 01       	movw	r24, r28
 758:	01 96       	adiw	r24, 0x01	; 1
 75a:	3c 01       	movw	r6, r24
 75c:	f6 01       	movw	r30, r12
 75e:	93 81       	ldd	r25, Z+3	; 0x03
 760:	f7 01       	movw	r30, r14
 762:	93 fd       	sbrc	r25, 3
 764:	85 91       	lpm	r24, Z+
 766:	93 ff       	sbrs	r25, 3
 768:	81 91       	ld	r24, Z+
 76a:	7f 01       	movw	r14, r30
 76c:	88 23       	and	r24, r24
 76e:	09 f4       	brne	.+2      	; 0x772 <vfprintf+0x3a>
 770:	ba c1       	rjmp	.+884    	; 0xae6 <__stack+0x1e7>
 772:	85 32       	cpi	r24, 0x25	; 37
 774:	39 f4       	brne	.+14     	; 0x784 <vfprintf+0x4c>
 776:	93 fd       	sbrc	r25, 3
 778:	85 91       	lpm	r24, Z+
 77a:	93 ff       	sbrs	r25, 3
 77c:	81 91       	ld	r24, Z+
 77e:	7f 01       	movw	r14, r30
 780:	85 32       	cpi	r24, 0x25	; 37
 782:	29 f4       	brne	.+10     	; 0x78e <vfprintf+0x56>
 784:	b6 01       	movw	r22, r12
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	0e 94 93 05 	call	0xb26	; 0xb26 <fputc>
 78c:	e7 cf       	rjmp	.-50     	; 0x75c <vfprintf+0x24>
 78e:	91 2c       	mov	r9, r1
 790:	21 2c       	mov	r2, r1
 792:	31 2c       	mov	r3, r1
 794:	ff e1       	ldi	r31, 0x1F	; 31
 796:	f3 15       	cp	r31, r3
 798:	d8 f0       	brcs	.+54     	; 0x7d0 <vfprintf+0x98>
 79a:	8b 32       	cpi	r24, 0x2B	; 43
 79c:	79 f0       	breq	.+30     	; 0x7bc <vfprintf+0x84>
 79e:	38 f4       	brcc	.+14     	; 0x7ae <vfprintf+0x76>
 7a0:	80 32       	cpi	r24, 0x20	; 32
 7a2:	79 f0       	breq	.+30     	; 0x7c2 <vfprintf+0x8a>
 7a4:	83 32       	cpi	r24, 0x23	; 35
 7a6:	a1 f4       	brne	.+40     	; 0x7d0 <vfprintf+0x98>
 7a8:	23 2d       	mov	r18, r3
 7aa:	20 61       	ori	r18, 0x10	; 16
 7ac:	1d c0       	rjmp	.+58     	; 0x7e8 <vfprintf+0xb0>
 7ae:	8d 32       	cpi	r24, 0x2D	; 45
 7b0:	61 f0       	breq	.+24     	; 0x7ca <vfprintf+0x92>
 7b2:	80 33       	cpi	r24, 0x30	; 48
 7b4:	69 f4       	brne	.+26     	; 0x7d0 <vfprintf+0x98>
 7b6:	23 2d       	mov	r18, r3
 7b8:	21 60       	ori	r18, 0x01	; 1
 7ba:	16 c0       	rjmp	.+44     	; 0x7e8 <vfprintf+0xb0>
 7bc:	83 2d       	mov	r24, r3
 7be:	82 60       	ori	r24, 0x02	; 2
 7c0:	38 2e       	mov	r3, r24
 7c2:	e3 2d       	mov	r30, r3
 7c4:	e4 60       	ori	r30, 0x04	; 4
 7c6:	3e 2e       	mov	r3, r30
 7c8:	2a c0       	rjmp	.+84     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 7ca:	f3 2d       	mov	r31, r3
 7cc:	f8 60       	ori	r31, 0x08	; 8
 7ce:	1d c0       	rjmp	.+58     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7d0:	37 fc       	sbrc	r3, 7
 7d2:	2d c0       	rjmp	.+90     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 7d4:	20 ed       	ldi	r18, 0xD0	; 208
 7d6:	28 0f       	add	r18, r24
 7d8:	2a 30       	cpi	r18, 0x0A	; 10
 7da:	40 f0       	brcs	.+16     	; 0x7ec <vfprintf+0xb4>
 7dc:	8e 32       	cpi	r24, 0x2E	; 46
 7de:	b9 f4       	brne	.+46     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 7e0:	36 fc       	sbrc	r3, 6
 7e2:	81 c1       	rjmp	.+770    	; 0xae6 <__stack+0x1e7>
 7e4:	23 2d       	mov	r18, r3
 7e6:	20 64       	ori	r18, 0x40	; 64
 7e8:	32 2e       	mov	r3, r18
 7ea:	19 c0       	rjmp	.+50     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 7ec:	36 fe       	sbrs	r3, 6
 7ee:	06 c0       	rjmp	.+12     	; 0x7fc <vfprintf+0xc4>
 7f0:	8a e0       	ldi	r24, 0x0A	; 10
 7f2:	98 9e       	mul	r9, r24
 7f4:	20 0d       	add	r18, r0
 7f6:	11 24       	eor	r1, r1
 7f8:	92 2e       	mov	r9, r18
 7fa:	11 c0       	rjmp	.+34     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 7fc:	ea e0       	ldi	r30, 0x0A	; 10
 7fe:	2e 9e       	mul	r2, r30
 800:	20 0d       	add	r18, r0
 802:	11 24       	eor	r1, r1
 804:	22 2e       	mov	r2, r18
 806:	f3 2d       	mov	r31, r3
 808:	f0 62       	ori	r31, 0x20	; 32
 80a:	3f 2e       	mov	r3, r31
 80c:	08 c0       	rjmp	.+16     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 80e:	8c 36       	cpi	r24, 0x6C	; 108
 810:	21 f4       	brne	.+8      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 812:	83 2d       	mov	r24, r3
 814:	80 68       	ori	r24, 0x80	; 128
 816:	38 2e       	mov	r3, r24
 818:	02 c0       	rjmp	.+4      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 81a:	88 36       	cpi	r24, 0x68	; 104
 81c:	41 f4       	brne	.+16     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 81e:	f7 01       	movw	r30, r14
 820:	93 fd       	sbrc	r25, 3
 822:	85 91       	lpm	r24, Z+
 824:	93 ff       	sbrs	r25, 3
 826:	81 91       	ld	r24, Z+
 828:	7f 01       	movw	r14, r30
 82a:	81 11       	cpse	r24, r1
 82c:	b3 cf       	rjmp	.-154    	; 0x794 <vfprintf+0x5c>
 82e:	98 2f       	mov	r25, r24
 830:	9f 7d       	andi	r25, 0xDF	; 223
 832:	95 54       	subi	r25, 0x45	; 69
 834:	93 30       	cpi	r25, 0x03	; 3
 836:	28 f4       	brcc	.+10     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 838:	0c 5f       	subi	r16, 0xFC	; 252
 83a:	1f 4f       	sbci	r17, 0xFF	; 255
 83c:	9f e3       	ldi	r25, 0x3F	; 63
 83e:	99 83       	std	Y+1, r25	; 0x01
 840:	0d c0       	rjmp	.+26     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 842:	83 36       	cpi	r24, 0x63	; 99
 844:	31 f0       	breq	.+12     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 846:	83 37       	cpi	r24, 0x73	; 115
 848:	71 f0       	breq	.+28     	; 0x866 <__DATA_REGION_LENGTH__+0x66>
 84a:	83 35       	cpi	r24, 0x53	; 83
 84c:	09 f0       	breq	.+2      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 84e:	59 c0       	rjmp	.+178    	; 0x902 <__stack+0x3>
 850:	21 c0       	rjmp	.+66     	; 0x894 <__DATA_REGION_LENGTH__+0x94>
 852:	f8 01       	movw	r30, r16
 854:	80 81       	ld	r24, Z
 856:	89 83       	std	Y+1, r24	; 0x01
 858:	0e 5f       	subi	r16, 0xFE	; 254
 85a:	1f 4f       	sbci	r17, 0xFF	; 255
 85c:	88 24       	eor	r8, r8
 85e:	83 94       	inc	r8
 860:	91 2c       	mov	r9, r1
 862:	53 01       	movw	r10, r6
 864:	13 c0       	rjmp	.+38     	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
 866:	28 01       	movw	r4, r16
 868:	f2 e0       	ldi	r31, 0x02	; 2
 86a:	4f 0e       	add	r4, r31
 86c:	51 1c       	adc	r5, r1
 86e:	f8 01       	movw	r30, r16
 870:	a0 80       	ld	r10, Z
 872:	b1 80       	ldd	r11, Z+1	; 0x01
 874:	36 fe       	sbrs	r3, 6
 876:	03 c0       	rjmp	.+6      	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
 878:	69 2d       	mov	r22, r9
 87a:	70 e0       	ldi	r23, 0x00	; 0
 87c:	02 c0       	rjmp	.+4      	; 0x882 <__DATA_REGION_LENGTH__+0x82>
 87e:	6f ef       	ldi	r22, 0xFF	; 255
 880:	7f ef       	ldi	r23, 0xFF	; 255
 882:	c5 01       	movw	r24, r10
 884:	0e 94 88 05 	call	0xb10	; 0xb10 <strnlen>
 888:	4c 01       	movw	r8, r24
 88a:	82 01       	movw	r16, r4
 88c:	f3 2d       	mov	r31, r3
 88e:	ff 77       	andi	r31, 0x7F	; 127
 890:	3f 2e       	mov	r3, r31
 892:	16 c0       	rjmp	.+44     	; 0x8c0 <__DATA_REGION_LENGTH__+0xc0>
 894:	28 01       	movw	r4, r16
 896:	22 e0       	ldi	r18, 0x02	; 2
 898:	42 0e       	add	r4, r18
 89a:	51 1c       	adc	r5, r1
 89c:	f8 01       	movw	r30, r16
 89e:	a0 80       	ld	r10, Z
 8a0:	b1 80       	ldd	r11, Z+1	; 0x01
 8a2:	36 fe       	sbrs	r3, 6
 8a4:	03 c0       	rjmp	.+6      	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
 8a6:	69 2d       	mov	r22, r9
 8a8:	70 e0       	ldi	r23, 0x00	; 0
 8aa:	02 c0       	rjmp	.+4      	; 0x8b0 <__DATA_REGION_LENGTH__+0xb0>
 8ac:	6f ef       	ldi	r22, 0xFF	; 255
 8ae:	7f ef       	ldi	r23, 0xFF	; 255
 8b0:	c5 01       	movw	r24, r10
 8b2:	0e 94 7d 05 	call	0xafa	; 0xafa <strnlen_P>
 8b6:	4c 01       	movw	r8, r24
 8b8:	f3 2d       	mov	r31, r3
 8ba:	f0 68       	ori	r31, 0x80	; 128
 8bc:	3f 2e       	mov	r3, r31
 8be:	82 01       	movw	r16, r4
 8c0:	33 fc       	sbrc	r3, 3
 8c2:	1b c0       	rjmp	.+54     	; 0x8fa <__DATA_REGION_LENGTH__+0xfa>
 8c4:	82 2d       	mov	r24, r2
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	88 16       	cp	r8, r24
 8ca:	99 06       	cpc	r9, r25
 8cc:	b0 f4       	brcc	.+44     	; 0x8fa <__DATA_REGION_LENGTH__+0xfa>
 8ce:	b6 01       	movw	r22, r12
 8d0:	80 e2       	ldi	r24, 0x20	; 32
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	0e 94 93 05 	call	0xb26	; 0xb26 <fputc>
 8d8:	2a 94       	dec	r2
 8da:	f4 cf       	rjmp	.-24     	; 0x8c4 <__DATA_REGION_LENGTH__+0xc4>
 8dc:	f5 01       	movw	r30, r10
 8de:	37 fc       	sbrc	r3, 7
 8e0:	85 91       	lpm	r24, Z+
 8e2:	37 fe       	sbrs	r3, 7
 8e4:	81 91       	ld	r24, Z+
 8e6:	5f 01       	movw	r10, r30
 8e8:	b6 01       	movw	r22, r12
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	0e 94 93 05 	call	0xb26	; 0xb26 <fputc>
 8f0:	21 10       	cpse	r2, r1
 8f2:	2a 94       	dec	r2
 8f4:	21 e0       	ldi	r18, 0x01	; 1
 8f6:	82 1a       	sub	r8, r18
 8f8:	91 08       	sbc	r9, r1
 8fa:	81 14       	cp	r8, r1
 8fc:	91 04       	cpc	r9, r1
 8fe:	71 f7       	brne	.-36     	; 0x8dc <__DATA_REGION_LENGTH__+0xdc>
 900:	e8 c0       	rjmp	.+464    	; 0xad2 <__stack+0x1d3>
 902:	84 36       	cpi	r24, 0x64	; 100
 904:	11 f0       	breq	.+4      	; 0x90a <__stack+0xb>
 906:	89 36       	cpi	r24, 0x69	; 105
 908:	41 f5       	brne	.+80     	; 0x95a <__stack+0x5b>
 90a:	f8 01       	movw	r30, r16
 90c:	37 fe       	sbrs	r3, 7
 90e:	07 c0       	rjmp	.+14     	; 0x91e <__stack+0x1f>
 910:	60 81       	ld	r22, Z
 912:	71 81       	ldd	r23, Z+1	; 0x01
 914:	82 81       	ldd	r24, Z+2	; 0x02
 916:	93 81       	ldd	r25, Z+3	; 0x03
 918:	0c 5f       	subi	r16, 0xFC	; 252
 91a:	1f 4f       	sbci	r17, 0xFF	; 255
 91c:	08 c0       	rjmp	.+16     	; 0x92e <__stack+0x2f>
 91e:	60 81       	ld	r22, Z
 920:	71 81       	ldd	r23, Z+1	; 0x01
 922:	07 2e       	mov	r0, r23
 924:	00 0c       	add	r0, r0
 926:	88 0b       	sbc	r24, r24
 928:	99 0b       	sbc	r25, r25
 92a:	0e 5f       	subi	r16, 0xFE	; 254
 92c:	1f 4f       	sbci	r17, 0xFF	; 255
 92e:	f3 2d       	mov	r31, r3
 930:	ff 76       	andi	r31, 0x6F	; 111
 932:	3f 2e       	mov	r3, r31
 934:	97 ff       	sbrs	r25, 7
 936:	09 c0       	rjmp	.+18     	; 0x94a <__stack+0x4b>
 938:	90 95       	com	r25
 93a:	80 95       	com	r24
 93c:	70 95       	com	r23
 93e:	61 95       	neg	r22
 940:	7f 4f       	sbci	r23, 0xFF	; 255
 942:	8f 4f       	sbci	r24, 0xFF	; 255
 944:	9f 4f       	sbci	r25, 0xFF	; 255
 946:	f0 68       	ori	r31, 0x80	; 128
 948:	3f 2e       	mov	r3, r31
 94a:	2a e0       	ldi	r18, 0x0A	; 10
 94c:	30 e0       	ldi	r19, 0x00	; 0
 94e:	a3 01       	movw	r20, r6
 950:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__ultoa_invert>
 954:	88 2e       	mov	r8, r24
 956:	86 18       	sub	r8, r6
 958:	45 c0       	rjmp	.+138    	; 0x9e4 <__stack+0xe5>
 95a:	85 37       	cpi	r24, 0x75	; 117
 95c:	31 f4       	brne	.+12     	; 0x96a <__stack+0x6b>
 95e:	23 2d       	mov	r18, r3
 960:	2f 7e       	andi	r18, 0xEF	; 239
 962:	b2 2e       	mov	r11, r18
 964:	2a e0       	ldi	r18, 0x0A	; 10
 966:	30 e0       	ldi	r19, 0x00	; 0
 968:	25 c0       	rjmp	.+74     	; 0x9b4 <__stack+0xb5>
 96a:	93 2d       	mov	r25, r3
 96c:	99 7f       	andi	r25, 0xF9	; 249
 96e:	b9 2e       	mov	r11, r25
 970:	8f 36       	cpi	r24, 0x6F	; 111
 972:	c1 f0       	breq	.+48     	; 0x9a4 <__stack+0xa5>
 974:	18 f4       	brcc	.+6      	; 0x97c <__stack+0x7d>
 976:	88 35       	cpi	r24, 0x58	; 88
 978:	79 f0       	breq	.+30     	; 0x998 <__stack+0x99>
 97a:	b5 c0       	rjmp	.+362    	; 0xae6 <__stack+0x1e7>
 97c:	80 37       	cpi	r24, 0x70	; 112
 97e:	19 f0       	breq	.+6      	; 0x986 <__stack+0x87>
 980:	88 37       	cpi	r24, 0x78	; 120
 982:	21 f0       	breq	.+8      	; 0x98c <__stack+0x8d>
 984:	b0 c0       	rjmp	.+352    	; 0xae6 <__stack+0x1e7>
 986:	e9 2f       	mov	r30, r25
 988:	e0 61       	ori	r30, 0x10	; 16
 98a:	be 2e       	mov	r11, r30
 98c:	b4 fe       	sbrs	r11, 4
 98e:	0d c0       	rjmp	.+26     	; 0x9aa <__stack+0xab>
 990:	fb 2d       	mov	r31, r11
 992:	f4 60       	ori	r31, 0x04	; 4
 994:	bf 2e       	mov	r11, r31
 996:	09 c0       	rjmp	.+18     	; 0x9aa <__stack+0xab>
 998:	34 fe       	sbrs	r3, 4
 99a:	0a c0       	rjmp	.+20     	; 0x9b0 <__stack+0xb1>
 99c:	29 2f       	mov	r18, r25
 99e:	26 60       	ori	r18, 0x06	; 6
 9a0:	b2 2e       	mov	r11, r18
 9a2:	06 c0       	rjmp	.+12     	; 0x9b0 <__stack+0xb1>
 9a4:	28 e0       	ldi	r18, 0x08	; 8
 9a6:	30 e0       	ldi	r19, 0x00	; 0
 9a8:	05 c0       	rjmp	.+10     	; 0x9b4 <__stack+0xb5>
 9aa:	20 e1       	ldi	r18, 0x10	; 16
 9ac:	30 e0       	ldi	r19, 0x00	; 0
 9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <__stack+0xb5>
 9b0:	20 e1       	ldi	r18, 0x10	; 16
 9b2:	32 e0       	ldi	r19, 0x02	; 2
 9b4:	f8 01       	movw	r30, r16
 9b6:	b7 fe       	sbrs	r11, 7
 9b8:	07 c0       	rjmp	.+14     	; 0x9c8 <__stack+0xc9>
 9ba:	60 81       	ld	r22, Z
 9bc:	71 81       	ldd	r23, Z+1	; 0x01
 9be:	82 81       	ldd	r24, Z+2	; 0x02
 9c0:	93 81       	ldd	r25, Z+3	; 0x03
 9c2:	0c 5f       	subi	r16, 0xFC	; 252
 9c4:	1f 4f       	sbci	r17, 0xFF	; 255
 9c6:	06 c0       	rjmp	.+12     	; 0x9d4 <__stack+0xd5>
 9c8:	60 81       	ld	r22, Z
 9ca:	71 81       	ldd	r23, Z+1	; 0x01
 9cc:	80 e0       	ldi	r24, 0x00	; 0
 9ce:	90 e0       	ldi	r25, 0x00	; 0
 9d0:	0e 5f       	subi	r16, 0xFE	; 254
 9d2:	1f 4f       	sbci	r17, 0xFF	; 255
 9d4:	a3 01       	movw	r20, r6
 9d6:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__ultoa_invert>
 9da:	88 2e       	mov	r8, r24
 9dc:	86 18       	sub	r8, r6
 9de:	fb 2d       	mov	r31, r11
 9e0:	ff 77       	andi	r31, 0x7F	; 127
 9e2:	3f 2e       	mov	r3, r31
 9e4:	36 fe       	sbrs	r3, 6
 9e6:	0d c0       	rjmp	.+26     	; 0xa02 <__stack+0x103>
 9e8:	23 2d       	mov	r18, r3
 9ea:	2e 7f       	andi	r18, 0xFE	; 254
 9ec:	a2 2e       	mov	r10, r18
 9ee:	89 14       	cp	r8, r9
 9f0:	58 f4       	brcc	.+22     	; 0xa08 <__stack+0x109>
 9f2:	34 fe       	sbrs	r3, 4
 9f4:	0b c0       	rjmp	.+22     	; 0xa0c <__stack+0x10d>
 9f6:	32 fc       	sbrc	r3, 2
 9f8:	09 c0       	rjmp	.+18     	; 0xa0c <__stack+0x10d>
 9fa:	83 2d       	mov	r24, r3
 9fc:	8e 7e       	andi	r24, 0xEE	; 238
 9fe:	a8 2e       	mov	r10, r24
 a00:	05 c0       	rjmp	.+10     	; 0xa0c <__stack+0x10d>
 a02:	b8 2c       	mov	r11, r8
 a04:	a3 2c       	mov	r10, r3
 a06:	03 c0       	rjmp	.+6      	; 0xa0e <__stack+0x10f>
 a08:	b8 2c       	mov	r11, r8
 a0a:	01 c0       	rjmp	.+2      	; 0xa0e <__stack+0x10f>
 a0c:	b9 2c       	mov	r11, r9
 a0e:	a4 fe       	sbrs	r10, 4
 a10:	0f c0       	rjmp	.+30     	; 0xa30 <__stack+0x131>
 a12:	fe 01       	movw	r30, r28
 a14:	e8 0d       	add	r30, r8
 a16:	f1 1d       	adc	r31, r1
 a18:	80 81       	ld	r24, Z
 a1a:	80 33       	cpi	r24, 0x30	; 48
 a1c:	21 f4       	brne	.+8      	; 0xa26 <__stack+0x127>
 a1e:	9a 2d       	mov	r25, r10
 a20:	99 7e       	andi	r25, 0xE9	; 233
 a22:	a9 2e       	mov	r10, r25
 a24:	09 c0       	rjmp	.+18     	; 0xa38 <__stack+0x139>
 a26:	a2 fe       	sbrs	r10, 2
 a28:	06 c0       	rjmp	.+12     	; 0xa36 <__stack+0x137>
 a2a:	b3 94       	inc	r11
 a2c:	b3 94       	inc	r11
 a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__stack+0x139>
 a30:	8a 2d       	mov	r24, r10
 a32:	86 78       	andi	r24, 0x86	; 134
 a34:	09 f0       	breq	.+2      	; 0xa38 <__stack+0x139>
 a36:	b3 94       	inc	r11
 a38:	a3 fc       	sbrc	r10, 3
 a3a:	11 c0       	rjmp	.+34     	; 0xa5e <__stack+0x15f>
 a3c:	a0 fe       	sbrs	r10, 0
 a3e:	06 c0       	rjmp	.+12     	; 0xa4c <__stack+0x14d>
 a40:	b2 14       	cp	r11, r2
 a42:	88 f4       	brcc	.+34     	; 0xa66 <__stack+0x167>
 a44:	28 0c       	add	r2, r8
 a46:	92 2c       	mov	r9, r2
 a48:	9b 18       	sub	r9, r11
 a4a:	0e c0       	rjmp	.+28     	; 0xa68 <__stack+0x169>
 a4c:	b2 14       	cp	r11, r2
 a4e:	60 f4       	brcc	.+24     	; 0xa68 <__stack+0x169>
 a50:	b6 01       	movw	r22, r12
 a52:	80 e2       	ldi	r24, 0x20	; 32
 a54:	90 e0       	ldi	r25, 0x00	; 0
 a56:	0e 94 93 05 	call	0xb26	; 0xb26 <fputc>
 a5a:	b3 94       	inc	r11
 a5c:	f7 cf       	rjmp	.-18     	; 0xa4c <__stack+0x14d>
 a5e:	b2 14       	cp	r11, r2
 a60:	18 f4       	brcc	.+6      	; 0xa68 <__stack+0x169>
 a62:	2b 18       	sub	r2, r11
 a64:	02 c0       	rjmp	.+4      	; 0xa6a <__stack+0x16b>
 a66:	98 2c       	mov	r9, r8
 a68:	21 2c       	mov	r2, r1
 a6a:	a4 fe       	sbrs	r10, 4
 a6c:	10 c0       	rjmp	.+32     	; 0xa8e <__stack+0x18f>
 a6e:	b6 01       	movw	r22, r12
 a70:	80 e3       	ldi	r24, 0x30	; 48
 a72:	90 e0       	ldi	r25, 0x00	; 0
 a74:	0e 94 93 05 	call	0xb26	; 0xb26 <fputc>
 a78:	a2 fe       	sbrs	r10, 2
 a7a:	17 c0       	rjmp	.+46     	; 0xaaa <__stack+0x1ab>
 a7c:	a1 fc       	sbrc	r10, 1
 a7e:	03 c0       	rjmp	.+6      	; 0xa86 <__stack+0x187>
 a80:	88 e7       	ldi	r24, 0x78	; 120
 a82:	90 e0       	ldi	r25, 0x00	; 0
 a84:	02 c0       	rjmp	.+4      	; 0xa8a <__stack+0x18b>
 a86:	88 e5       	ldi	r24, 0x58	; 88
 a88:	90 e0       	ldi	r25, 0x00	; 0
 a8a:	b6 01       	movw	r22, r12
 a8c:	0c c0       	rjmp	.+24     	; 0xaa6 <__stack+0x1a7>
 a8e:	8a 2d       	mov	r24, r10
 a90:	86 78       	andi	r24, 0x86	; 134
 a92:	59 f0       	breq	.+22     	; 0xaaa <__stack+0x1ab>
 a94:	a1 fe       	sbrs	r10, 1
 a96:	02 c0       	rjmp	.+4      	; 0xa9c <__stack+0x19d>
 a98:	8b e2       	ldi	r24, 0x2B	; 43
 a9a:	01 c0       	rjmp	.+2      	; 0xa9e <__stack+0x19f>
 a9c:	80 e2       	ldi	r24, 0x20	; 32
 a9e:	a7 fc       	sbrc	r10, 7
 aa0:	8d e2       	ldi	r24, 0x2D	; 45
 aa2:	b6 01       	movw	r22, r12
 aa4:	90 e0       	ldi	r25, 0x00	; 0
 aa6:	0e 94 93 05 	call	0xb26	; 0xb26 <fputc>
 aaa:	89 14       	cp	r8, r9
 aac:	38 f4       	brcc	.+14     	; 0xabc <__stack+0x1bd>
 aae:	b6 01       	movw	r22, r12
 ab0:	80 e3       	ldi	r24, 0x30	; 48
 ab2:	90 e0       	ldi	r25, 0x00	; 0
 ab4:	0e 94 93 05 	call	0xb26	; 0xb26 <fputc>
 ab8:	9a 94       	dec	r9
 aba:	f7 cf       	rjmp	.-18     	; 0xaaa <__stack+0x1ab>
 abc:	8a 94       	dec	r8
 abe:	f3 01       	movw	r30, r6
 ac0:	e8 0d       	add	r30, r8
 ac2:	f1 1d       	adc	r31, r1
 ac4:	80 81       	ld	r24, Z
 ac6:	b6 01       	movw	r22, r12
 ac8:	90 e0       	ldi	r25, 0x00	; 0
 aca:	0e 94 93 05 	call	0xb26	; 0xb26 <fputc>
 ace:	81 10       	cpse	r8, r1
 ad0:	f5 cf       	rjmp	.-22     	; 0xabc <__stack+0x1bd>
 ad2:	22 20       	and	r2, r2
 ad4:	09 f4       	brne	.+2      	; 0xad8 <__stack+0x1d9>
 ad6:	42 ce       	rjmp	.-892    	; 0x75c <vfprintf+0x24>
 ad8:	b6 01       	movw	r22, r12
 ada:	80 e2       	ldi	r24, 0x20	; 32
 adc:	90 e0       	ldi	r25, 0x00	; 0
 ade:	0e 94 93 05 	call	0xb26	; 0xb26 <fputc>
 ae2:	2a 94       	dec	r2
 ae4:	f6 cf       	rjmp	.-20     	; 0xad2 <__stack+0x1d3>
 ae6:	f6 01       	movw	r30, r12
 ae8:	86 81       	ldd	r24, Z+6	; 0x06
 aea:	97 81       	ldd	r25, Z+7	; 0x07
 aec:	02 c0       	rjmp	.+4      	; 0xaf2 <__stack+0x1f3>
 aee:	8f ef       	ldi	r24, 0xFF	; 255
 af0:	9f ef       	ldi	r25, 0xFF	; 255
 af2:	2b 96       	adiw	r28, 0x0b	; 11
 af4:	e2 e1       	ldi	r30, 0x12	; 18
 af6:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__epilogue_restores__>

00000afa <strnlen_P>:
 afa:	fc 01       	movw	r30, r24
 afc:	05 90       	lpm	r0, Z+
 afe:	61 50       	subi	r22, 0x01	; 1
 b00:	70 40       	sbci	r23, 0x00	; 0
 b02:	01 10       	cpse	r0, r1
 b04:	d8 f7       	brcc	.-10     	; 0xafc <strnlen_P+0x2>
 b06:	80 95       	com	r24
 b08:	90 95       	com	r25
 b0a:	8e 0f       	add	r24, r30
 b0c:	9f 1f       	adc	r25, r31
 b0e:	08 95       	ret

00000b10 <strnlen>:
 b10:	fc 01       	movw	r30, r24
 b12:	61 50       	subi	r22, 0x01	; 1
 b14:	70 40       	sbci	r23, 0x00	; 0
 b16:	01 90       	ld	r0, Z+
 b18:	01 10       	cpse	r0, r1
 b1a:	d8 f7       	brcc	.-10     	; 0xb12 <strnlen+0x2>
 b1c:	80 95       	com	r24
 b1e:	90 95       	com	r25
 b20:	8e 0f       	add	r24, r30
 b22:	9f 1f       	adc	r25, r31
 b24:	08 95       	ret

00000b26 <fputc>:
 b26:	0f 93       	push	r16
 b28:	1f 93       	push	r17
 b2a:	cf 93       	push	r28
 b2c:	df 93       	push	r29
 b2e:	fb 01       	movw	r30, r22
 b30:	23 81       	ldd	r18, Z+3	; 0x03
 b32:	21 fd       	sbrc	r18, 1
 b34:	03 c0       	rjmp	.+6      	; 0xb3c <fputc+0x16>
 b36:	8f ef       	ldi	r24, 0xFF	; 255
 b38:	9f ef       	ldi	r25, 0xFF	; 255
 b3a:	2c c0       	rjmp	.+88     	; 0xb94 <fputc+0x6e>
 b3c:	22 ff       	sbrs	r18, 2
 b3e:	16 c0       	rjmp	.+44     	; 0xb6c <fputc+0x46>
 b40:	46 81       	ldd	r20, Z+6	; 0x06
 b42:	57 81       	ldd	r21, Z+7	; 0x07
 b44:	24 81       	ldd	r18, Z+4	; 0x04
 b46:	35 81       	ldd	r19, Z+5	; 0x05
 b48:	42 17       	cp	r20, r18
 b4a:	53 07       	cpc	r21, r19
 b4c:	44 f4       	brge	.+16     	; 0xb5e <fputc+0x38>
 b4e:	a0 81       	ld	r26, Z
 b50:	b1 81       	ldd	r27, Z+1	; 0x01
 b52:	9d 01       	movw	r18, r26
 b54:	2f 5f       	subi	r18, 0xFF	; 255
 b56:	3f 4f       	sbci	r19, 0xFF	; 255
 b58:	31 83       	std	Z+1, r19	; 0x01
 b5a:	20 83       	st	Z, r18
 b5c:	8c 93       	st	X, r24
 b5e:	26 81       	ldd	r18, Z+6	; 0x06
 b60:	37 81       	ldd	r19, Z+7	; 0x07
 b62:	2f 5f       	subi	r18, 0xFF	; 255
 b64:	3f 4f       	sbci	r19, 0xFF	; 255
 b66:	37 83       	std	Z+7, r19	; 0x07
 b68:	26 83       	std	Z+6, r18	; 0x06
 b6a:	14 c0       	rjmp	.+40     	; 0xb94 <fputc+0x6e>
 b6c:	8b 01       	movw	r16, r22
 b6e:	ec 01       	movw	r28, r24
 b70:	fb 01       	movw	r30, r22
 b72:	00 84       	ldd	r0, Z+8	; 0x08
 b74:	f1 85       	ldd	r31, Z+9	; 0x09
 b76:	e0 2d       	mov	r30, r0
 b78:	09 95       	icall
 b7a:	89 2b       	or	r24, r25
 b7c:	e1 f6       	brne	.-72     	; 0xb36 <fputc+0x10>
 b7e:	d8 01       	movw	r26, r16
 b80:	16 96       	adiw	r26, 0x06	; 6
 b82:	8d 91       	ld	r24, X+
 b84:	9c 91       	ld	r25, X
 b86:	17 97       	sbiw	r26, 0x07	; 7
 b88:	01 96       	adiw	r24, 0x01	; 1
 b8a:	17 96       	adiw	r26, 0x07	; 7
 b8c:	9c 93       	st	X, r25
 b8e:	8e 93       	st	-X, r24
 b90:	16 97       	sbiw	r26, 0x06	; 6
 b92:	ce 01       	movw	r24, r28
 b94:	df 91       	pop	r29
 b96:	cf 91       	pop	r28
 b98:	1f 91       	pop	r17
 b9a:	0f 91       	pop	r16
 b9c:	08 95       	ret

00000b9e <__ultoa_invert>:
 b9e:	fa 01       	movw	r30, r20
 ba0:	aa 27       	eor	r26, r26
 ba2:	28 30       	cpi	r18, 0x08	; 8
 ba4:	51 f1       	breq	.+84     	; 0xbfa <__ultoa_invert+0x5c>
 ba6:	20 31       	cpi	r18, 0x10	; 16
 ba8:	81 f1       	breq	.+96     	; 0xc0a <__ultoa_invert+0x6c>
 baa:	e8 94       	clt
 bac:	6f 93       	push	r22
 bae:	6e 7f       	andi	r22, 0xFE	; 254
 bb0:	6e 5f       	subi	r22, 0xFE	; 254
 bb2:	7f 4f       	sbci	r23, 0xFF	; 255
 bb4:	8f 4f       	sbci	r24, 0xFF	; 255
 bb6:	9f 4f       	sbci	r25, 0xFF	; 255
 bb8:	af 4f       	sbci	r26, 0xFF	; 255
 bba:	b1 e0       	ldi	r27, 0x01	; 1
 bbc:	3e d0       	rcall	.+124    	; 0xc3a <__ultoa_invert+0x9c>
 bbe:	b4 e0       	ldi	r27, 0x04	; 4
 bc0:	3c d0       	rcall	.+120    	; 0xc3a <__ultoa_invert+0x9c>
 bc2:	67 0f       	add	r22, r23
 bc4:	78 1f       	adc	r23, r24
 bc6:	89 1f       	adc	r24, r25
 bc8:	9a 1f       	adc	r25, r26
 bca:	a1 1d       	adc	r26, r1
 bcc:	68 0f       	add	r22, r24
 bce:	79 1f       	adc	r23, r25
 bd0:	8a 1f       	adc	r24, r26
 bd2:	91 1d       	adc	r25, r1
 bd4:	a1 1d       	adc	r26, r1
 bd6:	6a 0f       	add	r22, r26
 bd8:	71 1d       	adc	r23, r1
 bda:	81 1d       	adc	r24, r1
 bdc:	91 1d       	adc	r25, r1
 bde:	a1 1d       	adc	r26, r1
 be0:	20 d0       	rcall	.+64     	; 0xc22 <__ultoa_invert+0x84>
 be2:	09 f4       	brne	.+2      	; 0xbe6 <__ultoa_invert+0x48>
 be4:	68 94       	set
 be6:	3f 91       	pop	r19
 be8:	2a e0       	ldi	r18, 0x0A	; 10
 bea:	26 9f       	mul	r18, r22
 bec:	11 24       	eor	r1, r1
 bee:	30 19       	sub	r19, r0
 bf0:	30 5d       	subi	r19, 0xD0	; 208
 bf2:	31 93       	st	Z+, r19
 bf4:	de f6       	brtc	.-74     	; 0xbac <__ultoa_invert+0xe>
 bf6:	cf 01       	movw	r24, r30
 bf8:	08 95       	ret
 bfa:	46 2f       	mov	r20, r22
 bfc:	47 70       	andi	r20, 0x07	; 7
 bfe:	40 5d       	subi	r20, 0xD0	; 208
 c00:	41 93       	st	Z+, r20
 c02:	b3 e0       	ldi	r27, 0x03	; 3
 c04:	0f d0       	rcall	.+30     	; 0xc24 <__ultoa_invert+0x86>
 c06:	c9 f7       	brne	.-14     	; 0xbfa <__ultoa_invert+0x5c>
 c08:	f6 cf       	rjmp	.-20     	; 0xbf6 <__ultoa_invert+0x58>
 c0a:	46 2f       	mov	r20, r22
 c0c:	4f 70       	andi	r20, 0x0F	; 15
 c0e:	40 5d       	subi	r20, 0xD0	; 208
 c10:	4a 33       	cpi	r20, 0x3A	; 58
 c12:	18 f0       	brcs	.+6      	; 0xc1a <__ultoa_invert+0x7c>
 c14:	49 5d       	subi	r20, 0xD9	; 217
 c16:	31 fd       	sbrc	r19, 1
 c18:	40 52       	subi	r20, 0x20	; 32
 c1a:	41 93       	st	Z+, r20
 c1c:	02 d0       	rcall	.+4      	; 0xc22 <__ultoa_invert+0x84>
 c1e:	a9 f7       	brne	.-22     	; 0xc0a <__ultoa_invert+0x6c>
 c20:	ea cf       	rjmp	.-44     	; 0xbf6 <__ultoa_invert+0x58>
 c22:	b4 e0       	ldi	r27, 0x04	; 4
 c24:	a6 95       	lsr	r26
 c26:	97 95       	ror	r25
 c28:	87 95       	ror	r24
 c2a:	77 95       	ror	r23
 c2c:	67 95       	ror	r22
 c2e:	ba 95       	dec	r27
 c30:	c9 f7       	brne	.-14     	; 0xc24 <__ultoa_invert+0x86>
 c32:	00 97       	sbiw	r24, 0x00	; 0
 c34:	61 05       	cpc	r22, r1
 c36:	71 05       	cpc	r23, r1
 c38:	08 95       	ret
 c3a:	9b 01       	movw	r18, r22
 c3c:	ac 01       	movw	r20, r24
 c3e:	0a 2e       	mov	r0, r26
 c40:	06 94       	lsr	r0
 c42:	57 95       	ror	r21
 c44:	47 95       	ror	r20
 c46:	37 95       	ror	r19
 c48:	27 95       	ror	r18
 c4a:	ba 95       	dec	r27
 c4c:	c9 f7       	brne	.-14     	; 0xc40 <__ultoa_invert+0xa2>
 c4e:	62 0f       	add	r22, r18
 c50:	73 1f       	adc	r23, r19
 c52:	84 1f       	adc	r24, r20
 c54:	95 1f       	adc	r25, r21
 c56:	a0 1d       	adc	r26, r0
 c58:	08 95       	ret

00000c5a <__prologue_saves__>:
 c5a:	2f 92       	push	r2
 c5c:	3f 92       	push	r3
 c5e:	4f 92       	push	r4
 c60:	5f 92       	push	r5
 c62:	6f 92       	push	r6
 c64:	7f 92       	push	r7
 c66:	8f 92       	push	r8
 c68:	9f 92       	push	r9
 c6a:	af 92       	push	r10
 c6c:	bf 92       	push	r11
 c6e:	cf 92       	push	r12
 c70:	df 92       	push	r13
 c72:	ef 92       	push	r14
 c74:	ff 92       	push	r15
 c76:	0f 93       	push	r16
 c78:	1f 93       	push	r17
 c7a:	cf 93       	push	r28
 c7c:	df 93       	push	r29
 c7e:	cd b7       	in	r28, 0x3d	; 61
 c80:	de b7       	in	r29, 0x3e	; 62
 c82:	ca 1b       	sub	r28, r26
 c84:	db 0b       	sbc	r29, r27
 c86:	0f b6       	in	r0, 0x3f	; 63
 c88:	f8 94       	cli
 c8a:	de bf       	out	0x3e, r29	; 62
 c8c:	0f be       	out	0x3f, r0	; 63
 c8e:	cd bf       	out	0x3d, r28	; 61
 c90:	09 94       	ijmp

00000c92 <__epilogue_restores__>:
 c92:	2a 88       	ldd	r2, Y+18	; 0x12
 c94:	39 88       	ldd	r3, Y+17	; 0x11
 c96:	48 88       	ldd	r4, Y+16	; 0x10
 c98:	5f 84       	ldd	r5, Y+15	; 0x0f
 c9a:	6e 84       	ldd	r6, Y+14	; 0x0e
 c9c:	7d 84       	ldd	r7, Y+13	; 0x0d
 c9e:	8c 84       	ldd	r8, Y+12	; 0x0c
 ca0:	9b 84       	ldd	r9, Y+11	; 0x0b
 ca2:	aa 84       	ldd	r10, Y+10	; 0x0a
 ca4:	b9 84       	ldd	r11, Y+9	; 0x09
 ca6:	c8 84       	ldd	r12, Y+8	; 0x08
 ca8:	df 80       	ldd	r13, Y+7	; 0x07
 caa:	ee 80       	ldd	r14, Y+6	; 0x06
 cac:	fd 80       	ldd	r15, Y+5	; 0x05
 cae:	0c 81       	ldd	r16, Y+4	; 0x04
 cb0:	1b 81       	ldd	r17, Y+3	; 0x03
 cb2:	aa 81       	ldd	r26, Y+2	; 0x02
 cb4:	b9 81       	ldd	r27, Y+1	; 0x01
 cb6:	ce 0f       	add	r28, r30
 cb8:	d1 1d       	adc	r29, r1
 cba:	0f b6       	in	r0, 0x3f	; 63
 cbc:	f8 94       	cli
 cbe:	de bf       	out	0x3e, r29	; 62
 cc0:	0f be       	out	0x3f, r0	; 63
 cc2:	cd bf       	out	0x3d, r28	; 61
 cc4:	ed 01       	movw	r28, r26
 cc6:	08 95       	ret

00000cc8 <_exit>:
 cc8:	f8 94       	cli

00000cca <__stop_program>:
 cca:	ff cf       	rjmp	.-2      	; 0xcca <__stop_program>
