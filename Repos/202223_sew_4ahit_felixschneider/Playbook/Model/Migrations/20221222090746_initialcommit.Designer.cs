// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model.Configuration;

#nullable disable

namespace Model.Migrations
{
    [DbContext(typeof(PlaybookDbContext))]
    [Migration("20221222090746_initialcommit")]
    partial class initialcommit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Model.Entities.Ability", b =>
                {
                    b.Property<string>("AbilityType")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ABILITY_TYPE");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("IMAGE_URL");

                    b.HasKey("AbilityType");

                    b.ToTable("ABILITIES");
                });

            modelBuilder.Entity("Model.Entities.AbilityEffect", b =>
                {
                    b.Property<string>("AbilityType")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ABILITY_TYPE");

                    b.Property<int>("EffectId")
                        .HasColumnType("int")
                        .HasColumnName("EFFECT_ID");

                    b.HasKey("AbilityType", "EffectId");

                    b.HasIndex("EffectId");

                    b.ToTable("ABILITY_HAS_EFFECTS_JT");
                });

            modelBuilder.Entity("Model.Entities.AEffect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EVENT_ID");

                    b.HasKey("Id");

                    b.ToTable("EFFECTS_BT");
                });

            modelBuilder.Entity("Model.Entities.AEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EVENT_ID");

                    b.Property<int>("Ranking")
                        .HasColumnType("int")
                        .HasColumnName("RANKING");

                    b.Property<int>("SectionId")
                        .HasColumnType("int")
                        .HasColumnName("SECTION_ID");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("EVENTS_BT");
                });

            modelBuilder.Entity("Model.Entities.AOutcome", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OUTCOME_ID");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("CONTENT");

                    b.Property<int>("RootSectionId")
                        .HasColumnType("int")
                        .HasColumnName("ROOT_SECTION_ID");

                    b.Property<int>("SectionId")
                        .HasColumnType("int")
                        .HasColumnName("SECTION_ID");

                    b.HasKey("Id");

                    b.HasIndex("RootSectionId");

                    b.HasIndex("SectionId");

                    b.ToTable("OUTCOMES_BT");
                });

            modelBuilder.Entity("Model.Entities.ARegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("REGION_ID");

                    b.Property<int?>("AreaId")
                        .HasColumnType("int")
                        .HasColumnName("AREA_ID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("IMAGE_URL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NAME");

                    b.Property<string>("RegionType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("REGION_TYPE");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("REGIONS_BT");
                });

            modelBuilder.Entity("Model.Entities.ASection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SECTION_ID");

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("BOOK_ID");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("CONTENT");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("SECTIONS_BT");
                });

            modelBuilder.Entity("Model.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AUTHOR_ID");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FIRST_NAME");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("LAST_NAME");

                    b.HasKey("Id");

                    b.ToTable("AUTHORS");
                });

            modelBuilder.Entity("Model.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BOOK_ID");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("IMAGE_URL");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TITLE");

                    b.HasKey("Id");

                    b.ToTable("BOOKS");
                });

            modelBuilder.Entity("Model.Entities.Creature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CREATURE_ID");

                    b.Property<int>("CombatSkill")
                        .HasColumnType("int")
                        .HasColumnName("COMBAT_SKILL");

                    b.Property<int>("Endurance")
                        .HasColumnType("int")
                        .HasColumnName("ENDURANCE");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("IMAGE_URL");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("CREATURE_TYPE");

                    b.HasKey("Id");

                    b.ToTable("CREATURES");
                });

            modelBuilder.Entity("Model.Entities.CreatureAbility", b =>
                {
                    b.Property<int>("CreatureId")
                        .HasColumnType("int")
                        .HasColumnName("CREATURE_ID");

                    b.Property<string>("AbilityType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ABILITY_TYPE");

                    b.HasKey("CreatureId", "AbilityType");

                    b.HasIndex("AbilityType");

                    b.ToTable("CREATURE_HAS_ABILITIES_JT");
                });

            modelBuilder.Entity("Model.Entities.ImageDecorator", b =>
                {
                    b.Property<string>("ImageUrl")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("IMAGE_URL");

                    b.Property<int>("SectionId")
                        .HasColumnType("int")
                        .HasColumnName("SECTION_ID");

                    b.HasKey("ImageUrl");

                    b.HasIndex("SectionId")
                        .IsUnique();

                    b.ToTable("IMAGE_DECORATORS");
                });

            modelBuilder.Entity("Model.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ITEM_ID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("ITEM_TYPE")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("IMAGE_URL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NAME");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("WEIGHT");

                    b.HasKey("Id");

                    b.ToTable("ITEMS_ST");

                    b.HasDiscriminator<string>("ITEM_TYPE").HasValue("Item");
                });

            modelBuilder.Entity("Model.Entities.ItemEffect", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ITEM_ID");

                    b.Property<int>("EffectId")
                        .HasColumnType("int")
                        .HasColumnName("EFFECT_ID");

                    b.HasKey("ItemId", "EffectId");

                    b.HasIndex("EffectId");

                    b.ToTable("ITEM_HAS_EFFECTS_JT");
                });

            modelBuilder.Entity("Model.Entities.Occupation", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("BOOK_ID");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("AUTHOR_ID");

                    b.Property<string>("OccupationType")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("OCCUPATION_TYPE");

                    b.HasKey("BookId", "AuthorId", "OccupationType");

                    b.HasIndex("AuthorId");

                    b.ToTable("BOOK_HAS_AUTHORS_JT");
                });

            modelBuilder.Entity("Model.Entities.PlayerLevel", b =>
                {
                    b.Property<string>("Level")
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("PLAYER_LEVEL");

                    b.Property<int>("AbilityCount")
                        .HasColumnType("int")
                        .HasColumnName("ABILITY_COUNT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("IMAGE_URL");

                    b.HasKey("Level");

                    b.ToTable("PLAYER_LEVELS");
                });

            modelBuilder.Entity("Model.Entities.AbilityOutcome", b =>
                {
                    b.HasBaseType("Model.Entities.AOutcome");

                    b.Property<string>("AbilityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ABILITY_TYPE");

                    b.HasIndex("AbilityType");

                    b.ToTable("ABILITY_OUTCOMES");
                });

            modelBuilder.Entity("Model.Entities.AChangeValueEvent", b =>
                {
                    b.HasBaseType("Model.Entities.AEvent");

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("AMOUNT");

                    b.ToTable("CHANGE_VALUE_EVENTS_BT");
                });

            modelBuilder.Entity("Model.Entities.AItemEvent", b =>
                {
                    b.HasBaseType("Model.Entities.AEvent");

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ITEM_ID");

                    b.HasIndex("ItemId");

                    b.ToTable("ITEM_EVENTS_BT");
                });

            modelBuilder.Entity("Model.Entities.Area", b =>
                {
                    b.HasBaseType("Model.Entities.ARegion");

                    b.ToTable("AREAS");
                });

            modelBuilder.Entity("Model.Entities.AValueChangeEffect", b =>
                {
                    b.HasBaseType("Model.Entities.AEffect");

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("AMOUNT");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("DURATION");

                    b.ToTable("VALUE_CHANGE_EFFECTS_BT");
                });

            modelBuilder.Entity("Model.Entities.Backpack", b =>
                {
                    b.HasBaseType("Model.Entities.Item");

                    b.ToTable("ITEMS_ST");

                    b.HasDiscriminator().HasValue("BACKPACK");
                });

            modelBuilder.Entity("Model.Entities.CombatEvent", b =>
                {
                    b.HasBaseType("Model.Entities.AEvent");

                    b.Property<int>("CreatureId")
                        .HasColumnType("int")
                        .HasColumnName("CREATURE_ID");

                    b.HasIndex("CreatureId");

                    b.ToTable("COMBAT_EVENTS");
                });

            modelBuilder.Entity("Model.Entities.DefaultOutcome", b =>
                {
                    b.HasBaseType("Model.Entities.AOutcome");

                    b.ToTable("DEFAULT_OUTCOMES");
                });

            modelBuilder.Entity("Model.Entities.DropAllWeaponsEvent", b =>
                {
                    b.HasBaseType("Model.Entities.AEvent");

                    b.ToTable("DROP_ALL_WEAPONS_EVENTS");
                });

            modelBuilder.Entity("Model.Entities.DropWeaponEvent", b =>
                {
                    b.HasBaseType("Model.Entities.AEvent");

                    b.ToTable("DROP_WEAPON_EVENTS");
                });

            modelBuilder.Entity("Model.Entities.Gem", b =>
                {
                    b.HasBaseType("Model.Entities.Item");

                    b.ToTable("ITEMS_ST");

                    b.HasDiscriminator().HasValue("GEM");
                });

            modelBuilder.Entity("Model.Entities.GoldOutcome", b =>
                {
                    b.HasBaseType("Model.Entities.AOutcome");

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("AMOUNT");

                    b.ToTable("GOLD_OUTCOMES");
                });

            modelBuilder.Entity("Model.Entities.Herb", b =>
                {
                    b.HasBaseType("Model.Entities.Item");

                    b.ToTable("ITEMS_ST");

                    b.HasDiscriminator().HasValue("HERB");
                });

            modelBuilder.Entity("Model.Entities.ItemOutcome", b =>
                {
                    b.HasBaseType("Model.Entities.AOutcome");

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ITEM_ID");

                    b.HasIndex("ItemId");

                    b.ToTable("ITEM_OUTCOMES");
                });

            modelBuilder.Entity("Model.Entities.Key", b =>
                {
                    b.HasBaseType("Model.Entities.Item");

                    b.ToTable("ITEMS_ST");

                    b.HasDiscriminator().HasValue("KEY");
                });

            modelBuilder.Entity("Model.Entities.MagicalItem", b =>
                {
                    b.HasBaseType("Model.Entities.Item");

                    b.ToTable("ITEMS_ST");

                    b.HasDiscriminator().HasValue("MAGICAL_ITEM");
                });

            modelBuilder.Entity("Model.Entities.MissionAccomplishedEvent", b =>
                {
                    b.HasBaseType("Model.Entities.AEvent");

                    b.ToTable("MISSION_ACCOMPLISHED_EVENTS");
                });

            modelBuilder.Entity("Model.Entities.MissionFailedEvent", b =>
                {
                    b.HasBaseType("Model.Entities.AEvent");

                    b.ToTable("MISSION_FAILED_EVENTS");
                });

            modelBuilder.Entity("Model.Entities.MissionFailedOutcome", b =>
                {
                    b.HasBaseType("Model.Entities.AOutcome");

                    b.ToTable("MISSION_FAILED_OUTCOMES");
                });

            modelBuilder.Entity("Model.Entities.PointOfInterest", b =>
                {
                    b.HasBaseType("Model.Entities.ARegion");

                    b.ToTable("POINTS_OF_INTEREST");
                });

            modelBuilder.Entity("Model.Entities.Potion", b =>
                {
                    b.HasBaseType("Model.Entities.Item");

                    b.ToTable("ITEMS_ST");

                    b.HasDiscriminator().HasValue("POTION");
                });

            modelBuilder.Entity("Model.Entities.RandomOutcome", b =>
                {
                    b.HasBaseType("Model.Entities.AOutcome");

                    b.Property<int>("Max")
                        .HasColumnType("int")
                        .HasColumnName("MAX");

                    b.Property<int>("Min")
                        .HasColumnType("int")
                        .HasColumnName("MIN");

                    b.ToTable("RANDOM_OUTCOMES");
                });

            modelBuilder.Entity("Model.Entities.RuleSection", b =>
                {
                    b.HasBaseType("Model.Entities.ASection");

                    b.Property<string>("SectionType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("SECTION_TYPE");

                    b.ToTable("RULE_SECTIONS");
                });

            modelBuilder.Entity("Model.Entities.Scroll", b =>
                {
                    b.HasBaseType("Model.Entities.Item");

                    b.ToTable("ITEMS_ST");

                    b.HasDiscriminator().HasValue("SCROLL");
                });

            modelBuilder.Entity("Model.Entities.StoryEvent", b =>
                {
                    b.HasBaseType("Model.Entities.AEvent");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("IMAGE_URL");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("TITLE");

                    b.ToTable("STORY_EVENTS");
                });

            modelBuilder.Entity("Model.Entities.StorySection", b =>
                {
                    b.HasBaseType("Model.Entities.ASection");

                    b.Property<int>("RegionId")
                        .HasColumnType("int")
                        .HasColumnName("REGION_ID");

                    b.Property<int>("SectionNr")
                        .HasColumnType("int")
                        .HasColumnName("SECTION_NR");

                    b.HasIndex("RegionId");

                    b.ToTable("STORY_SECTIONS");
                });

            modelBuilder.Entity("Model.Entities.Utility", b =>
                {
                    b.HasBaseType("Model.Entities.Item");

                    b.ToTable("ITEMS_ST");

                    b.HasDiscriminator().HasValue("UTILITY");
                });

            modelBuilder.Entity("Model.Entities.Weapon", b =>
                {
                    b.HasBaseType("Model.Entities.Item");

                    b.ToTable("ITEMS_ST");

                    b.HasDiscriminator().HasValue("WEAPON");
                });

            modelBuilder.Entity("Model.Entities.AcquireItemEvent", b =>
                {
                    b.HasBaseType("Model.Entities.AItemEvent");

                    b.ToTable("ACQUIRE_ITEM_EVENTS");
                });

            modelBuilder.Entity("Model.Entities.CombatSkillChangeEffect", b =>
                {
                    b.HasBaseType("Model.Entities.AValueChangeEffect");

                    b.ToTable("COMBAT_SKILL_CHANGE_EFFECTS");
                });

            modelBuilder.Entity("Model.Entities.CombatSkillChangeEvent", b =>
                {
                    b.HasBaseType("Model.Entities.AChangeValueEvent");

                    b.ToTable("COMBAT_SKILL_CHANGE_EVENTS");
                });

            modelBuilder.Entity("Model.Entities.CombatSkillTemporaryChangeEvent", b =>
                {
                    b.HasBaseType("Model.Entities.AChangeValueEvent");

                    b.ToTable("COMBAT_SKILL_TEMPORARY_CHANGE_EVENTS");
                });

            modelBuilder.Entity("Model.Entities.DropBackpackEvent", b =>
                {
                    b.HasBaseType("Model.Entities.AItemEvent");

                    b.ToTable("DROP_BACKPACK_EVENTS");
                });

            modelBuilder.Entity("Model.Entities.DropItemEvent", b =>
                {
                    b.HasBaseType("Model.Entities.AItemEvent");

                    b.ToTable("DROP_ITEM_EVENTS");
                });

            modelBuilder.Entity("Model.Entities.EnduranceChangeEffect", b =>
                {
                    b.HasBaseType("Model.Entities.AValueChangeEffect");

                    b.ToTable("ENDURANCE_CHANGE_EFFECTS");
                });

            modelBuilder.Entity("Model.Entities.EnduranceChangeEvent", b =>
                {
                    b.HasBaseType("Model.Entities.AChangeValueEvent");

                    b.ToTable("ENDURANCE_CHANGE_EVENTS");
                });

            modelBuilder.Entity("Model.Entities.GoldAmountChangeEvent", b =>
                {
                    b.HasBaseType("Model.Entities.AChangeValueEvent");

                    b.ToTable("GOLD_AMOUNT_CHANGE_EVENTS");
                });

            modelBuilder.Entity("Model.Entities.RationAmountChangeEvent", b =>
                {
                    b.HasBaseType("Model.Entities.AChangeValueEvent");

                    b.ToTable("RATION_AMOUNT_CHANGE_EVENTS");
                });

            modelBuilder.Entity("Model.Entities.AbilityEffect", b =>
                {
                    b.HasOne("Model.Entities.Ability", "Ability")
                        .WithMany()
                        .HasForeignKey("AbilityType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.AEffect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ability");

                    b.Navigation("Effect");
                });

            modelBuilder.Entity("Model.Entities.AEvent", b =>
                {
                    b.HasOne("Model.Entities.StorySection", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Model.Entities.AOutcome", b =>
                {
                    b.HasOne("Model.Entities.ASection", "RootASection")
                        .WithMany()
                        .HasForeignKey("RootSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.ASection", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RootASection");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Model.Entities.ARegion", b =>
                {
                    b.HasOne("Model.Entities.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId");

                    b.Navigation("Area");
                });

            modelBuilder.Entity("Model.Entities.ASection", b =>
                {
                    b.HasOne("Model.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Model.Entities.CreatureAbility", b =>
                {
                    b.HasOne("Model.Entities.Ability", "Ability")
                        .WithMany()
                        .HasForeignKey("AbilityType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Creature", "Creature")
                        .WithMany()
                        .HasForeignKey("CreatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ability");

                    b.Navigation("Creature");
                });

            modelBuilder.Entity("Model.Entities.ImageDecorator", b =>
                {
                    b.HasOne("Model.Entities.ASection", "Section")
                        .WithOne()
                        .HasForeignKey("Model.Entities.ImageDecorator", "SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Model.Entities.ItemEffect", b =>
                {
                    b.HasOne("Model.Entities.AEffect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Effect");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Model.Entities.Occupation", b =>
                {
                    b.HasOne("Model.Entities.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Model.Entities.AbilityOutcome", b =>
                {
                    b.HasOne("Model.Entities.Ability", "Ability")
                        .WithMany()
                        .HasForeignKey("AbilityType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.AOutcome", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.AbilityOutcome", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ability");
                });

            modelBuilder.Entity("Model.Entities.AChangeValueEvent", b =>
                {
                    b.HasOne("Model.Entities.AEvent", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.AChangeValueEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.AItemEvent", b =>
                {
                    b.HasOne("Model.Entities.AEvent", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.AItemEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Model.Entities.Area", b =>
                {
                    b.HasOne("Model.Entities.ARegion", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.Area", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.AValueChangeEffect", b =>
                {
                    b.HasOne("Model.Entities.AEffect", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.AValueChangeEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.CombatEvent", b =>
                {
                    b.HasOne("Model.Entities.Creature", "Creature")
                        .WithMany()
                        .HasForeignKey("CreatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.AEvent", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.CombatEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creature");
                });

            modelBuilder.Entity("Model.Entities.DefaultOutcome", b =>
                {
                    b.HasOne("Model.Entities.AOutcome", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.DefaultOutcome", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.DropAllWeaponsEvent", b =>
                {
                    b.HasOne("Model.Entities.AEvent", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.DropAllWeaponsEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.DropWeaponEvent", b =>
                {
                    b.HasOne("Model.Entities.AEvent", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.DropWeaponEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.GoldOutcome", b =>
                {
                    b.HasOne("Model.Entities.AOutcome", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.GoldOutcome", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.ItemOutcome", b =>
                {
                    b.HasOne("Model.Entities.AOutcome", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.ItemOutcome", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Model.Entities.MissionAccomplishedEvent", b =>
                {
                    b.HasOne("Model.Entities.AEvent", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.MissionAccomplishedEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.MissionFailedEvent", b =>
                {
                    b.HasOne("Model.Entities.AEvent", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.MissionFailedEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.MissionFailedOutcome", b =>
                {
                    b.HasOne("Model.Entities.AOutcome", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.MissionFailedOutcome", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.PointOfInterest", b =>
                {
                    b.HasOne("Model.Entities.ARegion", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.PointOfInterest", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.RandomOutcome", b =>
                {
                    b.HasOne("Model.Entities.AOutcome", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.RandomOutcome", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.RuleSection", b =>
                {
                    b.HasOne("Model.Entities.ASection", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.RuleSection", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.StoryEvent", b =>
                {
                    b.HasOne("Model.Entities.AEvent", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.StoryEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.StorySection", b =>
                {
                    b.HasOne("Model.Entities.ASection", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.StorySection", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.ARegion", "ARegion")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ARegion");
                });

            modelBuilder.Entity("Model.Entities.AcquireItemEvent", b =>
                {
                    b.HasOne("Model.Entities.AItemEvent", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.AcquireItemEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.CombatSkillChangeEffect", b =>
                {
                    b.HasOne("Model.Entities.AValueChangeEffect", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.CombatSkillChangeEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.CombatSkillChangeEvent", b =>
                {
                    b.HasOne("Model.Entities.AChangeValueEvent", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.CombatSkillChangeEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.CombatSkillTemporaryChangeEvent", b =>
                {
                    b.HasOne("Model.Entities.AChangeValueEvent", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.CombatSkillTemporaryChangeEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.DropBackpackEvent", b =>
                {
                    b.HasOne("Model.Entities.AItemEvent", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.DropBackpackEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.DropItemEvent", b =>
                {
                    b.HasOne("Model.Entities.AItemEvent", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.DropItemEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.EnduranceChangeEffect", b =>
                {
                    b.HasOne("Model.Entities.AValueChangeEffect", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.EnduranceChangeEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.EnduranceChangeEvent", b =>
                {
                    b.HasOne("Model.Entities.AChangeValueEvent", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.EnduranceChangeEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.GoldAmountChangeEvent", b =>
                {
                    b.HasOne("Model.Entities.AChangeValueEvent", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.GoldAmountChangeEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.RationAmountChangeEvent", b =>
                {
                    b.HasOne("Model.Entities.AChangeValueEvent", null)
                        .WithOne()
                        .HasForeignKey("Model.Entities.RationAmountChangeEvent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
